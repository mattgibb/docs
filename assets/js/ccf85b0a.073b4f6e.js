"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[38040],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=s(n),m=o,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||a;return n?r.createElement(f,l(l({ref:t},u),{},{components:n})):r.createElement(f,l({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var s=2;s<a;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},85162:function(e,t,n){n.d(t,{Z:function(){return l}});var r=n(67294),o=n(34334),a="tabItem_Ymn6";function l(e){var t=e.children,n=e.hidden,l=e.className;return r.createElement("div",{role:"tabpanel",className:(0,o.Z)(a,l),hidden:n},t)}},65488:function(e,t,n){n.d(t,{Z:function(){return m}});var r=n(83117),o=n(67294),a=n(34334),l=n(72389),i=n(67392),c=n(7094),s=n(12466),u="tabList__CuJ",p="tabItem_LNqP";function d(e){var t,n,l=e.lazy,d=e.block,m=e.defaultValue,f=e.values,h=e.groupId,b=e.className,v=o.Children.map(e.children,(function(e){if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),y=null!=f?f:v.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),g=(0,i.l)(y,(function(e,t){return e.value===t.value}));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var w=null===m?m:null!=(t=null!=m?m:null==(n=v.find((function(e){return e.props.default})))?void 0:n.props.value)?t:v[0].props.value;if(null!==w&&!y.some((function(e){return e.value===w})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+w+'" but none of its children has the corresponding value. Available values are: '+y.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var k=(0,c.U)(),T=k.tabGroupChoices,N=k.setTabGroupChoices,j=(0,o.useState)(w),x=j[0],E=j[1],O=[],C=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=h){var D=T[h];null!=D&&D!==x&&y.some((function(e){return e.value===D}))&&E(D)}var I=function(e){var t=e.currentTarget,n=O.indexOf(t),r=y[n].value;r!==x&&(C(t),E(r),null!=h&&N(h,String(r)))},P=function(e){var t,n=null;switch(e.key){case"ArrowRight":var r,o=O.indexOf(e.currentTarget)+1;n=null!=(r=O[o])?r:O[0];break;case"ArrowLeft":var a,l=O.indexOf(e.currentTarget)-1;n=null!=(a=O[l])?a:O[O.length-1]}null==(t=n)||t.focus()};return o.createElement("div",{className:(0,a.Z)("tabs-container",u)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":d},b)},y.map((function(e){var t=e.value,n=e.label,l=e.attributes;return o.createElement("li",(0,r.Z)({role:"tab",tabIndex:x===t?0:-1,"aria-selected":x===t,key:t,ref:function(e){return O.push(e)},onKeyDown:P,onFocus:I,onClick:I},l,{className:(0,a.Z)("tabs__item",p,null==l?void 0:l.className,{"tabs__item--active":x===t})}),null!=n?n:t)}))),l?(0,o.cloneElement)(v.filter((function(e){return e.props.value===x}))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},v.map((function(e,t){return(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==x})}))))}function m(e){var t=(0,l.Z)();return o.createElement(d,(0,r.Z)({key:String(t)},e))}},11041:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return u},default:function(){return h},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return m}});var r=n(83117),o=n(80102),a=(n(67294),n(3905)),l=n(65488),i=n(85162),c=["components"],s={sidebar_position:70,title:"Retrieving Data"},u=void 0,p={unversionedId:"collections/returning-collection-data",id:"collections/returning-collection-data",title:"Retrieving Data",description:"The Macrometa GDN is a multi-tenant platform for Free and Metered tier users. There are default limits for both tiers detailed in Tenant Quotas and Limits. This page describes how to retrieve larger result sets from a collection with the default limit of 1,000 documents per query.",source:"@site/docs/collections/returning-collection-data.md",sourceDirName:"collections",slug:"/collections/returning-collection-data",permalink:"/docs/collections/returning-collection-data",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/collections/returning-collection-data.md",tags:[],version:"current",sidebarPosition:70,frontMatter:{sidebar_position:70,title:"Retrieving Data"},sidebar:"tutorialSidebar",previous:{title:"Delete Collections",permalink:"/docs/collections/delete-collection"},next:{title:"Document Store",permalink:"/docs/collections/documents/"}},d={},m=[{value:"SDK download",id:"sdk-download",level:3},{value:"Cursor API",id:"cursor-api",level:3},{value:"Collection Export API",id:"collection-export-api",level:3}],f={toc:m};function h(e){var t=e.components,n=(0,o.Z)(e,c);return(0,a.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The Macrometa GDN is a multi-tenant platform for Free and Metered tier users. There are default limits for both tiers detailed in ",(0,a.kt)("a",{parentName:"p",href:"/docs/references/quotas"},"Tenant Quotas and Limits"),". This page describes how to retrieve larger result sets from a collection with the default limit of 1,000 documents per query."),(0,a.kt)("p",null,"There are two recommmended approaches depending on the volume of data being returned. The ",(0,a.kt)("a",{parentName:"p",href:"https://macrometa.com/docs/api#/operations/createQueryCursor"},"Cursor API")," can be used to fetch up to 30,000 records, this is an approximation based on platform limits. Attempting to return more than 30,000 from the Cursor API may cause the query to exceed the query execution time limit and raise an error. The ",(0,a.kt)("a",{parentName:"p",href:"https://macrometa.com/docs/api#/operations/ExportCollectionData"},"Collection Export API")," is the recommended approach when retrieving an entire collection."),(0,a.kt)("p",null,"Create a connection to the GDN using the jsc8 SDK. You will need an API key, JWT, or Email/Password to complete authentication. For more information, refer to ",(0,a.kt)("a",{parentName:"p",href:"/docs/authentication"},"Authentication"),"."),(0,a.kt)("h3",{id:"sdk-download"},"SDK download"),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"This solution is not currently supported in the pyc8 SDK")),(0,a.kt)(l.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"With Yarn or NPM\n\n    yarn add jsc8@beta\n    (or)\n    npm install jsc8@beta\n\nIf you want to use the SDK outside of the current directory, you can also install it globally using the `--global` flag:\n\n    npm install --global jsc8@beta\n\nFrom source,\n\n    git clone https://github.com/macrometacorp/jsc8.git\n    cd jsC8\n    npm install\n    npm run dist\n")))),(0,a.kt)("h3",{id:"cursor-api"},"Cursor API"),(0,a.kt)("p",null,"For the Cursor API solution, create a cursor to receive the results from your request. When calling the ",(0,a.kt)("inlineCode",{parentName:"p"},"query")," method request options are provided as key/value pairs. It is important to set the ",(0,a.kt)("inlineCode",{parentName:"p"},"batchSize")," value to 1000 and the ",(0,a.kt)("inlineCode",{parentName:"p"},"stream")," value to true. This will permit the results from the query to be returned as a stream, allowing us to return subsequent batches of data."),(0,a.kt)(l.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const jsc8 = require("jsc8");\nconst url = "https://gdn.paas.macrometa.io";\nconst fabricName = "_system";\nconst apiKey = "[apiKey]";\n\nlet query = `FOR i IN collection RETURN i`\n\nconst client = new jsc8({\n  url,\n  apiKey,\n  fabricName,\n});\n\n(async function () {\n  let result = "";\n  try {\n    const cursor = await client.query(\n      query,\n      {},\n      { batchSize: 1000, count: true, stream: true }\n    );\n    result = await cursor.all();\n  } catch (e) {\n    console.log(e.response.body);\n  }\n  console.log("Results:", result);\n})();\n')))),(0,a.kt)("h3",{id:"collection-export-api"},"Collection Export API"),(0,a.kt)("p",null,"The Collection Export solution should be used when retrieving the entire collection with out filtering the results. Entire collections can also be exported from the GDN web application. Get the collection document count to determine the necessary number of iterations to retrieve all documents. After each iteration the offset will increment by the batch size and return the next set of results."),(0,a.kt)(l.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'import jsc8 from "jsc8";\nconst url = "https://gdn.paas.macrometa.io"\nconst fabricName = "_system"\nconst coll = "[collection-name]"\nconst batchSize = 1000;\nconst apiKey = "[apiKey]"\n\nconst client = new jsc8({\n    url,\n    apiKey,\n    fabricName\n});\n\nlet data = [];\n(async function () {\n    try {\n        const { count } = await client.collection(coll).count();\n        const num = Math.ceil(count / batchSize);\n        for (let i = 0; i < num; i++) {\n            let offset = i * batchSize;\n            let cursor = await client.exportDataByCollectionName(coll, {\n                offset: offset,\n                limit: batchSize,\n            });\n            console.log(\n                `Data pulled from source fabric, collection ${coll}, ${i + 1\n                } of ${num}, server code: ${cursor.code}`\n             );\n            data.push.apply(data, cursor.result);\n        }\n        console.log(data);\n    } catch (e) {\n        console.log(e);\n    }\n})();\n')))))}h.isMDXComponent=!0}}]);