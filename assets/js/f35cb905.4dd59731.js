"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[91116],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return u}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=p(n),u=r,f=c["".concat(s,".").concat(u)]||c[u]||d[u]||i;return n?a.createElement(f,o(o({ref:t},m),{},{components:n})):a.createElement(f,o({ref:t},m))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},45594:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return d}});var a=n(83117),r=n(80102),i=(n(67294),n(3905)),o=["components"],l={title:"kafka (Source)"},s=void 0,p={unversionedId:"cep/reference/functions/source/kafka",id:"cep/reference/functions/source/kafka",title:"kafka (Source)",description:"A Kafka source receives events to be processed by gdn SP from a topic",source:"@site/docs/cep/reference/functions/source/kafka.md",sourceDirName:"cep/reference/functions/source",slug:"/cep/reference/functions/source/kafka",permalink:"/docs/cep/reference/functions/source/kafka",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/cep/reference/functions/source/kafka.md",tags:[],version:"current",frontMatter:{title:"kafka (Source)"},sidebar:"tutorialSidebar",previous:{title:"inMemory (Source)",permalink:"/docs/cep/reference/functions/source/inMemory"},next:{title:"kafkaMultiDC (Source)",permalink:"/docs/cep/reference/functions/source/kafkaMultiDC"}},m={},d=[{value:"Query Parameters",id:"query-parameters",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2}],c={toc:d};function u(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"A Kafka source receives events to be processed by gdn SP from a topic\nwith a partition for a Kafka cluster. The events received can be in the\n",(0,i.kt)("inlineCode",{parentName:"p"},"TEXT")," ",(0,i.kt)("inlineCode",{parentName:"p"},"XML")," ",(0,i.kt)("inlineCode",{parentName:"p"},"JSON")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Binary")," format. If the topic is not already\ncreated in the Kafka cluster, the Kafka sink creates the default\npartition for the given topic."),(0,i.kt)("p",null,"Syntax"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'CREATE SOURCE <NAME> WITH (type="kafka", map.type="<STRING>", bootstrap.servers="<STRING>", topic.list="<STRING>", group.id="<STRING>", threading.option="<STRING>", partition.no.list="<STRING>", seq.enabled="<BOOL>", is.binary.message="<BOOL>", topic.offsets.map="<STRING>", enable.offsets.commit="<BOOL>", optional.configuration="<STRING>")\n')),(0,i.kt)("h2",{id:"query-parameters"},"Query Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"),(0,i.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,i.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,i.kt)("th",{parentName:"tr",align:null},"Optional"),(0,i.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"bootstrap.servers"),(0,i.kt)("td",{parentName:"tr",align:null},"This specifies the list of Kafka servers to which the Kafka source must listen. This list can be provided as a set of comma-separated values. e.g., ",(0,i.kt)("inlineCode",{parentName:"td"},"localhost:9092,localhost:9093")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"STRING"),(0,i.kt)("td",{parentName:"tr",align:null},"No"),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"topic.list"),(0,i.kt)("td",{parentName:"tr",align:null},"This specifies the list of topics to which the source must listen. This list can be provided as a set of comma-separated values. e.g., ",(0,i.kt)("inlineCode",{parentName:"td"},"topic_one,topic_two")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"STRING"),(0,i.kt)("td",{parentName:"tr",align:null},"No"),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"group.id"),(0,i.kt)("td",{parentName:"tr",align:null},"This is an ID to identify the Kafka source group. The group ID ensures that sources with the same topic and partition that are in the same group do not receive the same event."),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"STRING"),(0,i.kt)("td",{parentName:"tr",align:null},"No"),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"threading.option"),(0,i.kt)("td",{parentName:"tr",align:null},"This specifies whether the Kafka source is to be run on a single thread, or in multiple threads based on a condition. Possible values are as follows: ",(0,i.kt)("inlineCode",{parentName:"td"},"single.thread"),": To run the Kafka source on a single thread. ",(0,i.kt)("inlineCode",{parentName:"td"},"topic.wise"),": To use a separate thread per topic. ",(0,i.kt)("inlineCode",{parentName:"td"},"partition.wise"),": To use a separate thread per partition."),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"STRING"),(0,i.kt)("td",{parentName:"tr",align:null},"No"),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"partition.no.list"),(0,i.kt)("td",{parentName:"tr",align:null},"The partition number list for the given topic. This is provided as a list of comma-separated values. e.g., ",(0,i.kt)("inlineCode",{parentName:"td"},"0,1,2,"),"."),(0,i.kt)("td",{parentName:"tr",align:null},"0"),(0,i.kt)("td",{parentName:"tr",align:null},"STRING"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes"),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"seq.enabled"),(0,i.kt)("td",{parentName:"tr",align:null},"If this parameter is set to ",(0,i.kt)("inlineCode",{parentName:"td"},"true"),", the sequence of the events received via the source is taken into account. Therefore, each event should contain a sequence number as an attribute value to indicate the sequence."),(0,i.kt)("td",{parentName:"tr",align:null},"false"),(0,i.kt)("td",{parentName:"tr",align:null},"BOOL"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes"),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"is.binary.message"),(0,i.kt)("td",{parentName:"tr",align:null},"In order to receive binary events via the Kafka source,it is required to setthis parameter to ",(0,i.kt)("inlineCode",{parentName:"td"},"True"),"."),(0,i.kt)("td",{parentName:"tr",align:null},"false"),(0,i.kt)("td",{parentName:"tr",align:null},"BOOL"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes"),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"topic.offsets.map"),(0,i.kt)("td",{parentName:"tr",align:null},"This parameter specifies reading offsets for each topic and partition. The value for this parameter is specified in the following format:  ",(0,i.kt)("inlineCode",{parentName:"td"},"<topic>=<offset>,<topic>=<offset>,"),"   When an offset is defined for a topic, the Kafka source skips reading the message with the number specified as the offset as well as all the messages sent previous to that message. If the offset is not defined for a specific topic it reads messages from the beginning. e.g., ",(0,i.kt)("inlineCode",{parentName:"td"},"stocks=100,trades=50")," reads from the 101th message of the ",(0,i.kt)("inlineCode",{parentName:"td"},"stocks")," topic, and from the 51st message of the ",(0,i.kt)("inlineCode",{parentName:"td"},"trades")," topic."),(0,i.kt)("td",{parentName:"tr",align:null},"null"),(0,i.kt)("td",{parentName:"tr",align:null},"STRING"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes"),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"enable.offsets.commit"),(0,i.kt)("td",{parentName:"tr",align:null},"This parameter specifies whether to commit offsets. If the manual asynchronous offset committing is needed, ",(0,i.kt)("inlineCode",{parentName:"td"},"enable.offsets.commit")," should be ",(0,i.kt)("inlineCode",{parentName:"td"},"true")," and ",(0,i.kt)("inlineCode",{parentName:"td"},"enable.auto.commit")," should be ",(0,i.kt)("inlineCode",{parentName:"td"},"false"),". If periodical committing is needed ",(0,i.kt)("inlineCode",{parentName:"td"},"enable.offsets.commit")," should be ",(0,i.kt)("inlineCode",{parentName:"td"},"true")," and ",(0,i.kt)("inlineCode",{parentName:"td"},"enable.auto.commit")," should be ",(0,i.kt)("inlineCode",{parentName:"td"},"true"),". If committing is not needed, ",(0,i.kt)("inlineCode",{parentName:"td"},"enable.offsets.commit")," should be ",(0,i.kt)("inlineCode",{parentName:"td"},"false"),". Note: ",(0,i.kt)("inlineCode",{parentName:"td"},"enable.auto.commit")," is an ",(0,i.kt)("inlineCode",{parentName:"td"},"optional.configuration")," property. If it is set to ",(0,i.kt)("inlineCode",{parentName:"td"},"true"),", Source will periodically(default: 1000ms. Configurable with ",(0,i.kt)("inlineCode",{parentName:"td"},"auto.commit.interval.ms")," property as an ",(0,i.kt)("inlineCode",{parentName:"td"},"optional.configuration"),") commit its current offset (defined as the offset of the next message to be read) for the partitions it is reading from back to Kafka. To guarantee at-least-once processing, we recommend you to enable Stream App Periodic State Persistence when ",(0,i.kt)("inlineCode",{parentName:"td"},"enable.auto.commit")," property is set to ",(0,i.kt)("inlineCode",{parentName:"td"},"true"),". During manual committing, it might introduce a latency during consumption."),(0,i.kt)("td",{parentName:"tr",align:null},"true"),(0,i.kt)("td",{parentName:"tr",align:null},"BOOL"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes"),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"optional.configuration"),(0,i.kt)("td",{parentName:"tr",align:null},"This parameter contains all the other possible configurations that the consumer is created with. e.g., ",(0,i.kt)("inlineCode",{parentName:"td"},"ssl.keystore.type:JKS,batch.size:200"),"."),(0,i.kt)("td",{parentName:"tr",align:null},"null"),(0,i.kt)("td",{parentName:"tr",align:null},"STRING"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes"),(0,i.kt)("td",{parentName:"tr",align:null},"No")))),(0,i.kt)("h2",{id:"example-1"},"Example 1"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"@App:name('TestExecutionPlan')\nCREATE STREAM BarStream (symbol string, price float, volume long);\n\n@info(name = 'query1')\nCREATE SOURCE FooStream WITH (type='kafka', topic.list='kafka_topic,kafka_topic2', group.id='test', threading.option='partition.wise', bootstrap.servers='localhost:9092', partition.no.list='0,1', map.type='xml') (symbol string, price float, volume long);\n\ninsert into BarStream\nfrom FooStream select symbol, price, volume ;\n")),(0,i.kt)("p",null,"This kafka source configuration listens to the ",(0,i.kt)("inlineCode",{parentName:"p"},"kafka_topic")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"kafka_topic2")," topics with ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"1")," partitions. A thread is created\nfor each topic and partition combination. The events are received in the\nXML format, mapped to a Stream App event, and sent to a stream named\n",(0,i.kt)("inlineCode",{parentName:"p"},"FooStream"),"."),(0,i.kt)("h2",{id:"example-2"},"Example 2"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"@App:name('TestExecutionPlan')\nCREATE STREAM BarStream (symbol string, price float, volume long);\n\n@info(name = 'query1')\nCREATE SOURCE FooStream WITH (type='kafka', topic.list='kafka_topic', group.id='test', threading.option='single.thread', bootstrap.servers='localhost:9092', map.type='xml') (symbol string, price float, volume long);\n\ninsert into BarStream\nfrom FooStream select symbol, price, volume ;\n")),(0,i.kt)("p",null,"This Kafka source configuration listens to the ",(0,i.kt)("inlineCode",{parentName:"p"},"kafka_topic")," topic for\nthe default partition because no ",(0,i.kt)("inlineCode",{parentName:"p"},"partition.no.list")," is defined. Only\none thread is created for the topic. The events are received in the XML\nformat, mapped to a Stream App event, and sent to a stream named\n",(0,i.kt)("inlineCode",{parentName:"p"},"FooStream"),"."))}u.isMDXComponent=!0}}]);