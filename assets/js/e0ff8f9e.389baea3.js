"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[65753],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),s=u(n),m=a,f=s["".concat(p,".").concat(m)]||s[m]||c[m]||l;return n?r.createElement(f,i(i({ref:t},d),{},{components:n})):r.createElement(f,i({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=s;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var u=2;u<l;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},59308:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return c}});var r=n(83117),a=n(80102),l=(n(67294),n(3905)),i=["components"],o={title:"addAll (Function)"},p=void 0,u={unversionedId:"cep/reference/functions/list/addAll",id:"cep/reference/functions/list/addAll",title:"addAll (Function)",description:"Function returns the updated list after adding all the values from the given list.",source:"@site/docs/cep/reference/functions/list/addAll.md",sourceDirName:"cep/reference/functions/list",slug:"/cep/reference/functions/list/addAll",permalink:"/docs/cep/reference/functions/list/addAll",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/cep/reference/functions/list/addAll.md",tags:[],version:"current",frontMatter:{title:"addAll (Function)"},sidebar:"tutorialSidebar",previous:{title:"add (Function)",permalink:"/docs/cep/reference/functions/list/add"},next:{title:"clear (Function)",permalink:"/docs/cep/reference/functions/list/clear"}},d={},c=[{value:"Query Parameters",id:"query-parameters",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2}],s={toc:c};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,l.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Function returns the updated list after adding all the values from the given list."),(0,l.kt)("p",null,"Syntax"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"<OBJECT> list:addAll(<OBJECT> to.list, <OBJECT> from.list)\n<OBJECT> list:addAll(<OBJECT> to.list, <OBJECT> from.list, <BOOL> is.distinct)\n")),(0,l.kt)("h2",{id:"query-parameters"},"Query Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,l.kt)("th",{parentName:"tr",align:null},"Optional"),(0,l.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"to.list"),(0,l.kt)("td",{parentName:"tr",align:null},"The list into which the values need to copied."),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"OBJECT"),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"from.list"),(0,l.kt)("td",{parentName:"tr",align:null},"The list from which the values are copied."),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"OBJECT"),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"is.distinct"),(0,l.kt)("td",{parentName:"tr",align:null},"If ",(0,l.kt)("inlineCode",{parentName:"td"},"true")," returns list with distinct values"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"BOOL"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,l.kt)("h2",{id:"example-1"},"Example 1"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"list:putAll(toList, fromList)\n")),(0,l.kt)("p",null,"If ",(0,l.kt)("inlineCode",{parentName:"p"},"toList")," contains values (",(0,l.kt)("inlineCode",{parentName:"p"},"IBM"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"gdn"),"), and if ",(0,l.kt)("inlineCode",{parentName:"p"},"fromList")," contains values (",(0,l.kt)("inlineCode",{parentName:"p"},"IBM"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"XYZ"),") then the function returns updated ",(0,l.kt)("inlineCode",{parentName:"p"},"toList")," with values (",(0,l.kt)("inlineCode",{parentName:"p"},"IBM"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"gdn"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"IBM"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"XYZ"),")."),(0,l.kt)("h2",{id:"example-2"},"Example 2"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"list:putAll(toList, fromList, true)\n")),(0,l.kt)("p",null,"If ",(0,l.kt)("inlineCode",{parentName:"p"},"toList")," contains values (",(0,l.kt)("inlineCode",{parentName:"p"},"IBM"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"gdn"),"), and if ",(0,l.kt)("inlineCode",{parentName:"p"},"fromList")," contains values (",(0,l.kt)("inlineCode",{parentName:"p"},"IBM"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"XYZ"),") then the function returns updated ",(0,l.kt)("inlineCode",{parentName:"p"},"toList")," with values (",(0,l.kt)("inlineCode",{parentName:"p"},"IBM"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"gdn"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"XYZ"),")."))}m.isMDXComponent=!0}}]);