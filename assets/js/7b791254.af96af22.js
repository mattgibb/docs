"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[19380],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return d}});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=a.createContext({}),r=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=r(e.components);return a.createElement(i.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,l=e.originalType,i=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=r(t),d=o,g=p["".concat(i,".").concat(d)]||p[d]||m[d]||l;return t?a.createElement(g,s(s({ref:n},u),{},{components:t})):a.createElement(g,s({ref:n},u))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var l=t.length,s=new Array(l);s[0]=p;var c={};for(var i in n)hasOwnProperty.call(n,i)&&(c[i]=n[i]);c.originalType=e,c.mdxType="string"==typeof e?e:o,s[1]=c;for(var r=2;r<l;r++)s[r]=t[r];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},85162:function(e,n,t){t.d(n,{Z:function(){return s}});var a=t(67294),o=t(34334),l="tabItem_Ymn6";function s(e){var n=e.children,t=e.hidden,s=e.className;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(l,s),hidden:t},n)}},65488:function(e,n,t){t.d(n,{Z:function(){return d}});var a=t(83117),o=t(67294),l=t(34334),s=t(72389),c=t(67392),i=t(7094),r=t(12466),u="tabList__CuJ",m="tabItem_LNqP";function p(e){var n,t,s=e.lazy,p=e.block,d=e.defaultValue,g=e.values,y=e.groupId,f=e.className,h=o.Children.map(e.children,(function(e){if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),T=null!=g?g:h.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),b=(0,c.l)(T,(function(e,n){return e.value===n.value}));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var E=null===d?d:null!=(n=null!=d?d:null==(t=h.find((function(e){return e.props.default})))?void 0:t.props.value)?n:h[0].props.value;if(null!==E&&!T.some((function(e){return e.value===E})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+E+'" but none of its children has the corresponding value. Available values are: '+T.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var x=(0,i.U)(),C=x.tabGroupChoices,k=x.setTabGroupChoices,N=(0,o.useState)(E),O=N[0],_=N[1],v=[],w=(0,r.o5)().blockElementScrollPositionUntilNextRender;if(null!=y){var I=C[y];null!=I&&I!==O&&T.some((function(e){return e.value===I}))&&_(I)}var A=function(e){var n=e.currentTarget,t=v.indexOf(n),a=T[t].value;a!==O&&(w(n),_(a),null!=y&&k(y,String(a)))},R=function(e){var n,t=null;switch(e.key){case"ArrowRight":var a,o=v.indexOf(e.currentTarget)+1;t=null!=(a=v[o])?a:v[0];break;case"ArrowLeft":var l,s=v.indexOf(e.currentTarget)-1;t=null!=(l=v[s])?l:v[v.length-1]}null==(n=t)||n.focus()};return o.createElement("div",{className:(0,l.Z)("tabs-container",u)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":p},f)},T.map((function(e){var n=e.value,t=e.label,s=e.attributes;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:O===n?0:-1,"aria-selected":O===n,key:n,ref:function(e){return v.push(e)},onKeyDown:R,onFocus:A,onClick:A},s,{className:(0,l.Z)("tabs__item",m,null==s?void 0:s.className,{"tabs__item--active":O===n})}),null!=t?t:n)}))),s?(0,o.cloneElement)(h.filter((function(e){return e.props.value===O}))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},h.map((function(e,n){return(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==O})}))))}function d(e){var n=(0,s.Z)();return o.createElement(p,(0,a.Z)({key:String(n)},e))}},65379:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return u},default:function(){return y},frontMatter:function(){return r},metadata:function(){return m},toc:function(){return d}});var a=t(83117),o=t(80102),l=(t(67294),t(3905)),s=t(65488),c=t(85162),i=["components"],r={title:"Document Store Example",sidebar_position:90},u=void 0,m={unversionedId:"collections/documents/document-store-example",id:"collections/documents/document-store-example",title:"Document Store Example",description:"This page provides an example of how to create and use a document store using code.",source:"@site/docs/collections/documents/document-store-example.md",sourceDirName:"collections/documents",slug:"/collections/documents/document-store-example",permalink:"/docs/collections/documents/document-store-example",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/collections/documents/document-store-example.md",tags:[],version:"current",sidebarPosition:90,frontMatter:{title:"Document Store Example",sidebar_position:90},sidebar:"tutorialSidebar",previous:{title:"Document Store Stream",permalink:"/docs/collections/documents/document-store-stream"},next:{title:"Tutorials",permalink:"/docs/collections/documents/tutorials/"}},p={},d=[{value:"SDK download",id:"sdk-download",level:2},{value:"Connect to GDN",id:"connect-to-gdn",level:2},{value:"Get GeoFabric Details",id:"get-geofabric-details",level:2},{value:"Create Collection",id:"create-collection",level:2},{value:"Create Index",id:"create-index",level:2},{value:"Insert Documents",id:"insert-documents",level:2},{value:"Query documents using C8QL",id:"query-documents-using-c8ql",level:2},{value:"Get realtime updates",id:"get-realtime-updates",level:2},{value:"Query as API",id:"query-as-api",level:2}],g={toc:d};function y(e){var n=e.components,t=(0,o.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"This page provides an example of how to create and use a document store using code."),(0,l.kt)("p",null,"Assume the following credentials for this example:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Tenant name is ",(0,l.kt)("inlineCode",{parentName:"li"},"nemo@nautilus.com"),"."),(0,l.kt)("li",{parentName:"ul"},"User password is ",(0,l.kt)("inlineCode",{parentName:"li"},"xxxxxx"),".")),(0,l.kt)("h2",{id:"sdk-download"},"SDK download"),(0,l.kt)(s.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(c.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"\n  pyC8 requires Python 3.5+. Python 3.6 or higher is recommended\n\n  To install pyC8, simply run\n\n      $ pip3 install pyC8\n\n  or, if you prefer to use conda:\n\n      conda install -c conda-forge pyC8\n\n  or pipenv:\n\n      pipenv install --pre pyC8\n\n  Once the installation process is finished, you can begin developing applications in Python.\n"))),(0,l.kt)(c.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"  With Yarn or NPM\n\n      yarn add jsc8\n      (or)\n      npm install jsc8\n\n  If you want to use the SDK outside of the current directory, you can also install it globally using the `--global` flag:\n\n      npm install --global jsc8\n\n  From source,\n\n      git clone https://github.com/macrometacorp/jsc8.git\n      cd jsC8\n      npm install\n      npm run dist\n")))),(0,l.kt)("h2",{id:"connect-to-gdn"},"Connect to GDN"),(0,l.kt)("p",null,"The first step in using GDN is to establish a connection to a region. When this code executes, it initializes the server connection to the *",(0,l.kt)("em",{parentName:"p"},"closest")," region to your location."),(0,l.kt)(s.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(c.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"from c8 import C8Client\n\nHOST = 'gdn.paas.macrometa.io'\nEMAIL ='nemo@nautilus.com'\nPASSWORD = 'xxxxx'\nGEOFABRIC = '_system'\n\nprint(\"--- Connecting to C8\")\n\nclient = C8Client(protocol='https', host=HOST, port=443,\n                          email=EMAIL, password=PASSWORD,\n                          geofabric=GEOFABRIC)\n"))),(0,l.kt)(c.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'  const jsc8 = require("jsc8");\n\n  // Simple Way\n  const client = new jsc8({url: "https://gdn.paas.macrometa.io", token: "XXXX", fabricName: \'_system\'});\n  // ----- OR -----\n  const client = new jsc8({url: "https://gdn.paas.macrometa.io", apiKey: "XXXX", fabricName: \'_system\'});\n\n\n  // To use advanced options\n  const client = new jsc8("https://gdn.paas.macrometa.io"); \n')))),(0,l.kt)("h2",{id:"get-geofabric-details"},"Get GeoFabric Details"),(0,l.kt)("p",null,"To get details of fabric,"),(0,l.kt)(s.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(c.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"from c8 import C8Client\n\nHOST = 'gdn.paas.macrometa.io'\nEMAIL = 'nemo@nautilus.com'\nPASSWORD = 'xxxxx'\nGEOFABRIC = '_system'\n\nprint(\"--- Connecting to C8\")\n\nclient = C8Client(protocol='https', host=HOST, port=443,\n                          email=EMAIL, password=PASSWORD,\n                          geofabric=GEOFABRIC)\n\nprint(\"Getting GeoFabric details...\")\nprint(client.get_fabric_details())\n"))),(0,l.kt)(c.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'  const jsc8 = require("jsc8");\n\n  // Crete a authenticated instance with Token / Apikey\n  // const client = new jsc8({url: "https://gdn.paas.macrometa.io", token: "XXXX", fabricName: \'_system\'});\n  // const client = new jsc8({url: "https://gdn.paas.macrometa.io", apiKey: "XXXX", fabricName: \'_system\'});\n  // await console.log("Authentication done!!...");\n\n  // Or use Email and Password to Authenticate client instance\n  const client = new jsc8("https://gdn.paas.macrometa.io");\n\n  await client.login("nemo@nautilus.com", "xxxxxx");\n\n  async function getFabric() {\n      try{\n        await console.log("Getting the fabric details...");\n        let result = await client.get();\n\n        await console.log("result is: ", result);\n      } catch(e){\n        await console.log("Fabric details could not be fetched because "+ e);\n      }\n  }\n\n  getFabric();\n')))),(0,l.kt)("h2",{id:"create-collection"},"Create Collection"),(0,l.kt)("p",null,"We can now create collection in the fabric. To do this, first you connect to fabric and then create a collection called ",(0,l.kt)("inlineCode",{parentName:"p"},"employees"),"."),(0,l.kt)("p",null,"The below example shows the steps."),(0,l.kt)(s.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(c.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"from c8 import C8Client\n\nHOST = 'gdn.paas.macrometa.io'\nEMAIL = 'nemo@nautilus.com'\nPASSWORD = 'xxxxx'\nGEOFABRIC = '_system'\nCOLLECTION_NAME = 'employees'\n\nprint(\"--- Connecting to C8\")\n\nclient = C8Client(protocol='https', host=HOST, port=443,\n                          email=EMAIL, password=PASSWORD,\n                          geofabric=GEOFABRIC)\n\nprint(\"Creating collection\u2026\")\n\nclient.create_collection(name=COLLECTION_NAME, stream=True)\n"))),(0,l.kt)(c.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'  const jsc8 = require("jsc8");\n\n  // Crete a authenticated instance with Token / Apikey\n  // const client = new jsc8({url: "https://gdn.paas.macrometa.io", token: "XXXX", fabricName: \'_system\'});\n  // const client = new jsc8({url: "https://gdn.paas.macrometa.io", apiKey: "XXXX", fabricName: \'_system\'});\n  // await console.log("Authentication done!!...");\n\n  // Or use Email and Password to Authenticate client instance\n  const client = new jsc8("https://gdn.paas.macrometa.io");\n\n  await client.login("nemo@nautilus.com", "xxxxxx");\n\n  async function createCollection() {\n    await console.log("Creating the collection employees under demoFabric...");\n    let collectionDetails;\n    try{\n      collectionDetails = await client.createCollection(\'employees\'); \n      await console.log("The collection details are: ", collectionDetails);\n    } catch(e){\n      return "Collection creation did not succeed due to " + e;\n    }\n\n    return "Collection " + collectionDetails.name + " created successfully";  \n  }\n\n  createCollection().then(console.log);\n')))),(0,l.kt)("h2",{id:"create-index"},"Create Index"),(0,l.kt)("p",null,"Let's add a ",(0,l.kt)("inlineCode",{parentName:"p"},"hash_index")," called emails to our collection employees. Please refer to reference guide for details on other available index types."),(0,l.kt)(s.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(c.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"from c8 import C8Client\n\nHOST = 'gdn.paas.macrometa.io'\nEMAIL = 'nemo@nautilus.com'\nPASSWORD = 'xxxxx'\nGEOFABRIC = '_system'\nCOLLECTION_NAME = 'employees'\nFIELDS = ['email', 'name']\n\nprint(\"--- Connecting to C8\")\n\nclient = C8Client(protocol='https', host=HOST, port=443,\n                          email=EMAIL, password=PASSWORD,\n                          geofabric=GEOFABRIC)\n\nprint(\"Adding hash index...\")\n\nclient.add_hash_index(COLLECTION_NAME, fields=FIELDS, unique=False)      \n"))),(0,l.kt)(c.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'  const jsc8 = require("jsc8");\n\n  // Crete a authenticated instance with Token / Apikey\n  // const client = new jsc8({url: "https://gdn.paas.macrometa.io", token: "XXXX", fabricName: \'_system\'});\n  // const client = new jsc8({url: "https://gdn.paas.macrometa.io", apiKey: "XXXX", fabricName: \'_system\'});\n  // await console.log("Authentication done!!...");\n\n  // Or use Email and Password to Authenticate client instance\n  const client = new jsc8("https://gdn.paas.macrometa.io");\n\n  await client.login("nemo@nautilus.com", "xxxxxx");\n\n  async function createIndex() {\n    await console.log("Creating the index on collection employees under demoFabric...");\n    let index;\n    try{\n      index = await client.addHashIndex("employees", ["email", "_key"]); \n      await console.log("The index details are: ", index);\n    } catch(e){\n      return "Index creation did not succeed due to " + e;\n    }\n\n    return "Index created successfully";  \n  }\n\n  createIndex().then(console.log);\n')))),(0,l.kt)("h2",{id:"insert-documents"},"Insert Documents"),(0,l.kt)("p",null,"Let's insert documents to the employees collection as shown below."),(0,l.kt)(s.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(c.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"from c8 import C8Client\n\nHOST = 'gdn.paas.macrometa.io'\nEMAIL = 'nemo@nautilus.com'\nPASSWORD = 'xxxxx'\nGEOFABRIC = '_system'\nCOLLECTION_NAME = 'employees'\nDOCS = [\n    {'_key':'James', 'firstname': 'James', 'lastname':'Kirk', 'email':'james.kirk@macrometa.io'},\n    {'_key': 'Han', 'firstname': 'Han', 'lastname':'Solo', 'email':'han.solo@macrometa.io'},\n    {'_key': 'Bruce', 'firstname': 'Bruce', 'lastname':'Wayne', 'email':'bruce.wayne@macrometa.io'}\n  ]\n\nprint(\"--- Connecting to C8\")\n\nclient = C8Client(protocol='https', host=HOST, port=443,\n                          email=EMAIL, password=PASSWORD,\n                          geofabric=GEOFABRIC)\n\nprint(\"Inserting documents...\")\n\nclient.insert_document(collection_name=COLLECTION_NAME, document=DOCS)\n"))),(0,l.kt)(c.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"  const jsc8 = require(\"jsc8\");\n\n  // Crete a authenticated instance with Token / Apikey\n  // const client = new jsc8({url: \"https://gdn.paas.macrometa.io\", token: \"XXXX\", fabricName: '_system'});\n  // const client = new jsc8({url: \"https://gdn.paas.macrometa.io\", apiKey: \"XXXX\", fabricName: '_system'});\n  // await console.log(\"Authentication done!!...\");\n\n  // Or use Email & Password to Authenticate client instance\n  const client = new jsc8(\"https://gdn.paas.macrometa.io\");\n\n  await client.login(\"nemo@nautilus.com\", \"xxxxxx\");\n\n  //Variables\n  const docJean = {'_key':'Jean', \n            'firstname': 'Jean', \n            'lastname':'Picard', 'email':'jean.picard@macrometa.io'};\n\n  const docJames = {'_key':'James', \n                    'firstname': 'James', 'lastname':'Kirk', 'email':'james.kirk@macrometa.io'};\n\n  const docHan = {'_key': 'Han', \n                  'firstname': 'Han',\n                  'lastname':'Solo', 'email':'han.solo@macrometa.io'};\n\n  const docBruce = {'_key': 'Bruce',\n                    'firstname': 'Bruce', 'lastname':'Wayne', 'email':'bruce.wayne@macrometa.io'};\n\n  const docs = [docJean, docJames, docHan, docBruce];\n\n\n  async function populate() {\n    await console.log(\"Creating the collection object to be used and populating with documents...\");\n    await client.insertDocumentMany(\"employees\", docs);\n    await console.log(\"collection populated with documents\");\n  }\n\n  populate();\n")))),(0,l.kt)("h2",{id:"query-documents-using-c8ql"},"Query documents using C8QL"),(0,l.kt)("p",null,"C8QL is C8's query language. You can execute C8QL query on our newly created collection employees to get its contents."),(0,l.kt)("p",null,"The query ",(0,l.kt)("inlineCode",{parentName:"p"},"FOR employee IN employees RETURN employee")," is equivalent to SQL's SELECT query."),(0,l.kt)(s.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(c.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"from c8 import C8Client\n\nHOST = 'gdn.paas.macrometa.io'\nEMAIL = 'nemo@nautilus.com'\nPASSWORD = 'xxxxx'\nGEOFABRIC = '_system'\nQUERY = 'FOR employee IN employees RETURN employee'\n\nclient = C8Client(protocol='https', host=HOST, port=443,\n                          email=EMAIL, password=PASSWORD,\n                          geofabric=GEOFABRIC)\n\ncursor = client.execute_query(QUERY)\ndocs = [document for document in cursor]\nprint(f\"Response from Query: {docs}\")\n"))),(0,l.kt)(c.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'  const jsc8 = require("jsc8");\n\n  // Crete a authenticated instance with Token / Apikey\n  // const client = new jsc8({url: "https://gdn.paas.macrometa.io", token: "XXXX", fabricName: \'_system\'});\n  // const client = new jsc8({url: "https://gdn.paas.macrometa.io", apiKey: "XXXX", fabricName: \'_system\'});\n  // await console.log("Authentication done!!...");\n\n  // Or use Email & Password to Authenticate client instance\n  const client = new jsc8("https://gdn.paas.macrometa.io");\n\n  await client.login("nemo@nautilus.com", "xxxxxx");\n\n  async function c8Queries() {\n    \n    const result = await client.executeQuery(\n      "FOR employee IN employees RETURN employee"\n    );\n    await console.log(result);\n  }\n\n  c8Queries();\n')))),(0,l.kt)("h2",{id:"get-realtime-updates"},"Get realtime updates"),(0,l.kt)("p",null,"Example for real-time updates from a collection in fabric:"),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Enable the 'Stream' parameter within the collection to get real-time updates.")),(0,l.kt)(s.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(c.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"from c8 import C8Client\n\nHOST = 'gdn.paas.macrometa.io'\nEMAIL = 'nemo@nautilus.com'\nPASSWORD = 'xxxxx'\nGEOFABRIC = '_system'\nCOLLECTION_NAME = 'employees'\n\nclient = C8Client(protocol='https', host=HOST, port=443,\n                          email=EMAIL, password=PASSWORD,\n                          geofabric=GEOFABRIC)\n\ndef callback_fn(event):\n    print(event)\n\nclient.on_change(COLLECTION_NAME, callback=callback_fn)\n"))),(0,l.kt)(c.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'  const jsc8 = require("jsc8");\n\n  // Crete a authenticated instance with Token / Apikey\n  // const client = new jsc8({url: "https://gdn.paas.macrometa.io", token: "XXXX", fabricName: \'_system\'});\n  // const client = new jsc8({url: "https://gdn.paas.macrometa.io", apiKey: "XXXX", fabricName: \'_system\'});\n  // await console.log("Authentication done!!...");\n\n  // Or use Email & Password to Authenticate client instance\n  const client = new jsc8("https://gdn.paas.macrometa.io");\n\n  await client.login("nemo@nautilus.com", "xxxxxx");\n\n  async function callback_fn(collection){\n    await console.log("Connection open on ", collection.name);\n  }\n\n  async function realTimeListener() {\n    const listener = await client.onCollectionChange("employees");\n\n    listener.on(\'message\',(msg) => console.log("message=>", msg));\n    listener.on(\'open\',() => {\n        this.callback_fn(collection);\n      });\n    listener.on(\'close\',() => console.log("connection closed"));\n  }\n\n  realTimeListener();\n')))),(0,l.kt)("h2",{id:"query-as-api"},"Query as API"),(0,l.kt)("p",null,"Query as API (aka RESTQL) enables developers to quickly convert saved C8QL queries into geo-distributed REST APIs. This eliminates the need for separate backend servers & containers for CRUD operations."),(0,l.kt)(s.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(c.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'import time\nfrom c8 import C8Client\n\nFED_URL = "gdn.paas.macrometa.io"\nGUEST_MAIL = "nemo@nautilus.com"\nGUEST_PASSWORD = "xxxxxx"\nGEO_FABRIC = "_system"\nCOLLECTION_NAME = "person"\n\nVALUE = "INSERT {\'firstname\':@firstname, \'lastname\':@lastname, \'email\':@email, \'zipcode\':@zipcode, \'_key\': \'abc\'} IN %s" % COLLECTION_NAME\nPARAMETER = {"firstname": "", "lastname": "", "email": "", "zipcode": ""}\n\nINSERT_DATA = {"query": {"name": "insertRecord", "parameter": PARAMETER, "value": VALUE}} \nGET_DATA = {"query": {"name": "getRecords", "value": "FOR doc IN %s RETURN doc" % COLLECTION_NAME}}\nUPDATE_DATA = {"query": {"name": "updateRecord", "value": "UPDATE \'abc\' WITH { \\"lastname\\": \\"cena\\" } IN %s" % COLLECTION_NAME }}\nDELETE_DATA = {"query": {"name": "deleteRecord", "value": "REMOVE \'abc\' IN %s" % COLLECTION_NAME}}\nGET_COUNT = {"query": {"name": "countRecords", "value": "RETURN COUNT(FOR doc IN %s RETURN 1)" % COLLECTION_NAME}}\n\nif __name__ == \'__main__\':\n\n    print("\\n ------- CONNECTION SETUP  ------")\n    print(f"tenant: {GUEST_MAIL}, geofabric:{GEO_FABRIC}")\n    client = C8Client(protocol=\'https\', host=FED_URL, port=443,\n                    email=GUEST_MAIL, password=GUEST_PASSWORD,\n                    geofabric=GEO_FABRIC)    \n\n    print("\\n ------- CREATE GEO-REPLICATED COLLECTION  ------")\n    if client.has_collection(COLLECTION_NAME):\n        print("Collection exists")\n    else:\n        employees = client.create_collection(COLLECTION_NAME, stream=True)\n    print(f"Created collection: {COLLECTION_NAME}")\n\n    print("\\n ------- CREATE RESTQLs  ------")\n    client.create_restql(INSERT_DATA)  # name: insertRecord\n    client.create_restql(GET_DATA)  # name: getRecords\n    client.create_restql(UPDATE_DATA)  # name: updateRecord\n    client.create_restql(DELETE_DATA)  # name: deleteRecord\n    client.create_restql(GET_COUNT)  # name: countRecords\n    print(f"Created RESTQLs:{client.get_restqls}")\n\n    time.sleep(3)\n    print("\\n ------- EXECUTE RESTQLs ------")\n    print("Insert data....")\n    response = client.execute_restql(\n        "insertRecord",\n        {"bindVars": {"firstname": "john", "lastname": "doe",\n                      "email": "john.doe@macrometa.io", "zipcode": "511037"}})\n    print(response)\n\n    print("Get data....")\n    response = client.execute_restql("getRecords")\n    print(response)\n\n    print("Update data....")\n    response = client.execute_restql("updateRecord")\n    print(response)\n\n    print("Get data....")\n    response = client.execute_restql("getRecords")\n    print(response)\n\n    print("Count records....")\n    response = client.execute_restql("countRecords")\n    print(response)\n\n    print("Delete data....")\n    response = client.execute_restql("deleteRecord")\n    print(response)\n\n    print("\\n ------- DELETE RESTQLs ------")\n    client.delete_restql("insertRecord")\n    client.delete_restql("getRecords")\n    client.delete_restql("updateRecord")\n    client.delete_restql("countRecords")\n    client.delete_restql("deleteRecord")\n\n    print("\\n ------- DONE  ------")\n'))),(0,l.kt)(c.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'  const jsc8 = require(\'jsc8\');\n\n  // Crete a authenticated instance with Token / Apikey\n  // const client = new jsc8({url: "https://gdn.paas.macrometa.io", token: "XXXX", fabricName: \'_system\'});\n  // const client = new jsc8({url: "https://gdn.paas.macrometa.io", apiKey: "XXXX", fabricName: \'_system\'});\n  // await console.log("Authentication done!!...");\n\n  // Or use Email and Password to Authenticate client instance\n  const client = new jsc8("https://gdn.paas.macrometa.io");\n\n  await client.login("nemo@nautilus.com", "xxxxxx");\n\n  //Variables\n  const collection_name = "addresses" + Math.floor(1000 + Math.random() * 9000).toString();\n\n  //Queries\n  const insert_data = "INSERT {\'firstname\':@firstname, \'lastname\':@lastname, \'email\':@email, \'zipcode\':@zipcode, \'_key\': \'abc\'} IN " + collection_name;\n\n  const get_data = "FOR doc IN " + collection_name + " RETURN doc";\n\n  const update_data = "UPDATE \'abc\' WITH {\'lastname\': @lastname } IN " + collection_name;\n\n  const delete_data = "REMOVE \'abc\' IN " + collection_name;\n\n  const get_count = "RETURN COUNT(FOR doc IN " + collection_name + " RETURN 1)";\n\n\n  async function restqldemo() {\n    console.log("------- CREATE GEO-REPLICATED COLLECTION  ------");\n\n    const collection = await client.createCollection(collection_name);\n\n    console.log("Collection " + collection_name + " created.\\n");\n\n    console.log("------- SAVING THE QUERIES  ------");\n\n    await client.createRestql("insertData", insert_data, {});\n    await client.createRestql("getData", get_data, {});\n    await client.createRestql("updateData", update_data, {});\n    await client.createRestql("deleteData", delete_data, {});\n    await client.createRestql("getCount", get_count, {});\n\n    console.log("Saved Queries Successfully\\n");\n\n    console.log("------- EXECUTING THE QUERIES  ------");\n\n    const bindVars = {\n      "firstname": "john", "lastname": "doe",\n      "email": "john.doe@macrometa.io", "zipcode": "511037"\n    };\n\n    await client.executeRestql("insertData", bindVars);\n\n    console.log("Data Inserted \\n");\n\n    const res = await client.executeRestql("getData");\n\n    console.log("Output of get data query:");\n    console.log(res.result);\n    console.log("\\n");\n\n    await client.executeRestql("updateData", { "lastname": "mathews" });\n\n    console.log("Data updated \\n");\n\n    const data = await client.executeRestql("getData");\n\n    console.log("Output of get data query after update:");\n\n    console.log(data.result);\n\n    console.log("\\n");\n\n    const count = await client.executeRestql("getCount");\n\n    console.log("Count:");\n\n    console.log(count.result);\n\n    await client.executeRestql("deleteData");\n  }\n\n  restqldemo().then(console.log("Starting Execution"));\n')))))}y.isMDXComponent=!0}}]);