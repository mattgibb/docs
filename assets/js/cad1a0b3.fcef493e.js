"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6703],{3905:function(e,t,i){i.d(t,{Zo:function(){return p},kt:function(){return u}});var n=i(67294);function a(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function r(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function o(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?r(Object(i),!0).forEach((function(t){a(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function s(e,t){if(null==e)return{};var i,n,a=function(e,t){if(null==e)return{};var i,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||(a[i]=e[i]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var c=n.createContext({}),l=function(e){var t=n.useContext(c),i=t;return e&&(i="function"==typeof e?e(t):o(o({},t),e)),i},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var i=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(i),u=a,m=d["".concat(c,".").concat(u)]||d[u]||h[u]||r;return i?n.createElement(m,o(o({ref:t},p),{},{components:i})):n.createElement(m,o({ref:t},p))}));function u(e,t){var i=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=i.length,o=new Array(r);o[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<r;l++)o[l]=i[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,i)}d.displayName="MDXCreateElement"},51822:function(e,t,i){i.r(t),i.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return u},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return h}});var n=i(83117),a=i(80102),r=(i(67294),i(3905)),o=["components"],s={title:"Graph Queries",sidebar_position:60},c=void 0,l={unversionedId:"collections/graphs/graph-queries",id:"collections/graphs/graph-queries",title:"Graph Queries",description:"This page provides an example of how to make graph queries.",source:"@site/docs/collections/graphs/graph-queries.md",sourceDirName:"collections/graphs",slug:"/collections/graphs/graph-queries",permalink:"/docs/collections/graphs/graph-queries",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/collections/graphs/graph-queries.md",tags:[],version:"current",sidebarPosition:60,frontMatter:{title:"Graph Queries",sidebar_position:60},sidebar:"tutorialSidebar",previous:{title:"Graph Functions",permalink:"/docs/collections/graphs/graph-functions"},next:{title:"Example Graphs",permalink:"/docs/collections/graphs/example-graphs"}},p={},h=[{value:"Querying graphs",id:"querying-graphs",level:2},{value:"Dataset",id:"dataset",level:2},{value:"Queries",id:"queries",level:2},{value:"Breadth-first search",id:"breadth-first-search",level:3},{value:"Shortest path",id:"shortest-path",level:3},{value:"Get the distance on the shortest path from San Francisco to Paris:",id:"get-the-distance-on-the-shortest-path-from-san-francisco-to-paris",level:3},{value:"Nearest cities",id:"nearest-cities",level:3},{value:"Cities within a given distance",id:"cities-within-a-given-distance",level:3}],d={toc:h};function u(e){var t=e.components,i=(0,a.Z)(e,o);return(0,r.kt)("wrapper",(0,n.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This page provides an example of how to make graph queries."),(0,r.kt)("h2",{id:"querying-graphs"},"Querying graphs"),(0,r.kt)("p",null,"Storing (and retrieving) a graph is one thing, but the actual problems only begin when we want to query information about a graph."),(0,r.kt)("p",null,"Finding the neighbours of a ",(0,r.kt)("inlineCode",{parentName:"p"},"vertex")," is one crucial question one might have about a graph (or relation, which is the same thing). However, when we deal with graphs (or relations) in practice, we usually have a lot more questions, here we just mention a few that come to mind:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Find all neighbours of a ",(0,r.kt)("inlineCode",{parentName:"li"},"vertex")," only using ",(0,r.kt)("inlineCode",{parentName:"li"},"edges")," with a given ",(0,r.kt)("inlineCode",{parentName:"li"},"property")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"label"),"."),(0,r.kt)("li",{parentName:"ol"},"Find all neighbours of a ",(0,r.kt)("inlineCode",{parentName:"li"},"vertex")," with a given ",(0,r.kt)("inlineCode",{parentName:"li"},"property")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"label"),"."),(0,r.kt)("li",{parentName:"ol"},"Find all paths with a fixed length L in the graph starting at some given ",(0,r.kt)("inlineCode",{parentName:"li"},"vertex"),"."),(0,r.kt)("li",{parentName:"ol"},"Find the shortest (or lightest when working with weights) path from vertex ",(0,r.kt)("inlineCode",{parentName:"li"},"V")," to vertex ",(0,r.kt)("inlineCode",{parentName:"li"},"W"),"."),(0,r.kt)("li",{parentName:"ol"},"Find the distances between any two vertices in the graph."),(0,r.kt)("li",{parentName:"ol"},"Perform a depth first search for some vertex starting at a given vertex."),(0,r.kt)("li",{parentName:"ol"},"Perform a breadth first search for some vertex starting at a given vertex."),(0,r.kt)("li",{parentName:"ol"},"Find a minimal spanning tree for the graph."),(0,r.kt)("li",{parentName:"ol"},"Perform any map-reduce like computation as is possible in the Pregel framework by Google, for example \u201cPagerank\u201d or \u201cFind connected components\u201d."),(0,r.kt)("li",{parentName:"ol"},"Solve the traveling salesman problem in the graph.")),(0,r.kt)("p",null,"GDN provides several ",(0,r.kt)("a",{parentName:"p",href:"/docs/collections/graphs/graph-functions"},"Graph Functions")," for working with edges and vertices, to analyze them and their relations."),(0,r.kt)("h2",{id:"dataset"},"Dataset"),(0,r.kt)("p",null,"Create a document collection named cities. Add a Geo Index to the collection cities with Fields location and Geo JSON set to true. To populate the cities collection, execute the following query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-JavaScript"},'LET c = [\n    {"_key": "sanfrancisco", "location": [-122.416667, 37.783333]},\n    {"_key": "newyork", "location": [-74.0059, 40.7127]},\n    {"_key": "detroit", "location": [-83.045833, 42.331389]},\n    {"_key": "paris", "location": [2.3508, 48.8567]},\n    {"_key": "dublin", "location": [-6.260278, 53.349722]},\n    {"_key": "singapore", "location": [103.8, 1.3]},\n    {"_key": "houston", "location": [-95.383056, 29.762778]},\n    {"_key": "seattle", "location": [-122.333056, 47.609722]}\n]\nFOR city IN c\n    INSERT city IN cities\n')),(0,r.kt)("p",null,"Create an edge collection named flights. To populate the flights collection, execute the following query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-JavaScript"},'LET e = [\n    {"_from": "cities/sanfrancisco", "_to": "cities/singapore", "distance": 13600},\n    {"_from": "cities/sanfrancisco", "_to": "cities/newyork", "distance": 4000},\n    {"_from": "cities/sanfrancisco", "_to": "cities/detroit", "distance": 3300},\n    {"_from": "cities/sanfrancisco", "_to": "cities/houston", "distance": 2600},\n    {"_from": "cities/detroit", "_to": "cities/sanfrancisco", "distance": 3300},\n    {"_from": "cities/detroit", "_to": "cities/newyork", "distance": 800},\n    {"_from": "cities/newyork", "_to": "cities/sanfrancisco", "distance": 4000},\n    {"_from": "cities/newyork", "_to": "cities/detroit", "distance": 800},\n    {"_from": "cities/newyork", "_to": "cities/dublin", "distance": 5100},\n    {"_from": "cities/newyork", "_to": "cities/paris", "distance": 5800},\n    {"_from": "cities/newyork", "_to": "cities/houston", "distance": 2300},\n    {"_from": "cities/dublin", "_to": "cities/newyork", "distance": 5100},\n    {"_from": "cities/dublin", "_to": "cities/paris", "distance": 800},\n    {"_from": "cities/paris", "_to": "cities/newyork", "distance": 5800},\n    {"_from": "cities/paris", "_to": "cities/dublin", "distance": 800},\n    {"_from": "cities/paris", "_to": "cities/singapore", "distance": 10700},\n    {"_from": "cities/singapore", "_to": "cities/sanfrancisco", "distance": 13600},\n    {"_from": "cities/singapore", "_to": "cities/paris", "distance": 10700},\n    {"_from": "cities/houston", "_to": "cities/sanfrancisco", "distance": 2600},\n    {"_from": "cities/houston", "_to": "cities/newyork", "distance": 2300}\n]\nFOR edge IN e\n    INSERT edge IN flights\n')),(0,r.kt)("p",null,"Create a graph named airline with and edges in flights and both from and to vertices in cities."),(0,r.kt)("h2",{id:"queries"},"Queries"),(0,r.kt)("h3",{id:"breadth-first-search"},"Breadth-first search"),(0,r.kt)("p",null,"Get all cities with a direct flight to New York:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-JavaScript"},'WITH cities\n     FOR city IN INBOUND "cities/newyork" flights\n     RETURN city\n')),(0,r.kt)("h3",{id:"shortest-path"},"Shortest path"),(0,r.kt)("p",null,"Get the shortest path from San Francisco to Paris:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-JavaScript"},'WITH cities\n     LET path = (\n    FOR city IN OUTBOUND SHORTEST_PATH "cities/sanfrancisco" TO "cities/paris"\n        GRAPH "airline"\n        OPTIONS {"weightAttribute": "distance"}\n        RETURN city\n     )\n     RETURN path\n')),(0,r.kt)("h3",{id:"get-the-distance-on-the-shortest-path-from-san-francisco-to-paris"},"Get the distance on the shortest path from San Francisco to Paris:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-JavaScript"},'WITH cities\n     LET path = (\n    FOR city, e IN OUTBOUND SHORTEST_PATH "cities/sanfrancisco" TO "cities/paris"\n        GRAPH "airline"\n        OPTIONS {"weightAttribute": "distance"}\n        RETURN e.distance\n    )\n    RETURN SUM(path)\n')),(0,r.kt)("h3",{id:"nearest-cities"},"Nearest cities"),(0,r.kt)("p",null,"Get the 2 nearest cities to a specified latitude and longitude."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-JavaScript"},'FOR loc IN NEAR(cities, 53.35, -6.26, 2, "distance")\nRETURN {\n    name: loc._key,\n    latitude: loc.location[1],\n    longitude: loc.location[0],\n    distance: loc.distance / 1000\n    }\n')),(0,r.kt)("h3",{id:"cities-within-a-given-distance"},"Cities within a given distance"),(0,r.kt)("p",null,"Get the cities that are no more than 2500km away from houston."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-JavaScript"},'LET city = DOCUMENT("cities/houston")\nFOR loc IN WITHIN(cities, city.location[1], city.location[0], 2500 * 1000, "distance")\nRETURN {\n    name: loc._key,\n    latitude: loc.location[1],\n    longitude: loc.location[0],\n    distance: loc.distance / 1000\n    }\n')))}u.isMDXComponent=!0}}]);