"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[51979],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=s(n),d=a,g=c["".concat(p,".").concat(d)]||c[d]||m[d]||i;return n?r.createElement(g,l(l({ref:t},u),{},{components:n})):r.createElement(g,l({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},41148:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return m}});var r=n(83117),a=n(80102),i=(n(67294),n(3905)),l=["components"],o={title:"text (Source Mapper)"},p=void 0,s={unversionedId:"cep/reference/functions/sourcemapper/text",id:"cep/reference/functions/sourcemapper/text",title:"text (Source Mapper)",description:"This extension is a text to Stream App event input mapper. Transports that",source:"@site/docs/cep/reference/functions/sourcemapper/text.md",sourceDirName:"cep/reference/functions/sourcemapper",slug:"/cep/reference/functions/sourcemapper/text",permalink:"/docs/cep/reference/functions/sourcemapper/text",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/cep/reference/functions/sourcemapper/text.md",tags:[],version:"current",frontMatter:{title:"text (Source Mapper)"},sidebar:"tutorialSidebar",previous:{title:"passThrough (Source Mapper)",permalink:"/docs/cep/reference/functions/sourcemapper/passThrough"},next:{title:"xml (Source Mapper)",permalink:"/docs/cep/reference/functions/sourcemapper/xml"}},u={},m=[{value:"Query Parameters",id:"query-parameters",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2}],c={toc:m};function d(e){var t=e.components,n=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This extension is a text to Stream App event input mapper. Transports that\naccept text messages can utilize this extension to convert the incoming\ntext message to Stream App event. Users can either use a pre-defined text\nformat where event conversion happens without any additional\nconfigurations, or specify a regex to map a text message using custom\nconfigurations."),(0,i.kt)("p",null,"Syntax"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'CREATE SOURCE <NAME> WITH (map.type="text", regex.groupid="<STRING>", fail.on.missing.attribute="<BOOL>", event.grouping.enabled="<BOOL>", delimiter="<STRING>", new.line.character="<STRING>")\n')),(0,i.kt)("h2",{id:"query-parameters"},"Query Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"),(0,i.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,i.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,i.kt)("th",{parentName:"tr",align:null},"Optional"),(0,i.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"regex.groupid"),(0,i.kt)("td",{parentName:"tr",align:null},"This parameter specifies a regular expression group. The ",(0,i.kt)("inlineCode",{parentName:"td"},"groupid")," can be any capital letter (e.g., regex.A,regex.B .. etc). You can specify any number of regular expression groups. In the attribute annotation, you need to map all attributes to the regular expression group with the matching group index. If you need to to enable custom mapping, it is required to specifythe matching group for each and every attribute."),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"STRING"),(0,i.kt)("td",{parentName:"tr",align:null},"No"),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"fail.on.missing.attribute"),(0,i.kt)("td",{parentName:"tr",align:null},"This parameter specifies how unknown attributes should be handled. If it is set to ",(0,i.kt)("inlineCode",{parentName:"td"},"true")," a message is dropped if its execution fails, or if one or more attributes do not have values. If this parameter is set to ",(0,i.kt)("inlineCode",{parentName:"td"},"false"),", null values are assigned to attributes with missing values, and messages with such attributes are not dropped."),(0,i.kt)("td",{parentName:"tr",align:null},"true"),(0,i.kt)("td",{parentName:"tr",align:null},"BOOL"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes"),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"event.grouping.enabled"),(0,i.kt)("td",{parentName:"tr",align:null},"This parameter specifies whether event grouping is enabled or not. To receive a group of events together and generate multiple events, this parameter must be set to ",(0,i.kt)("inlineCode",{parentName:"td"},"true"),"."),(0,i.kt)("td",{parentName:"tr",align:null},"false"),(0,i.kt)("td",{parentName:"tr",align:null},"BOOL"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes"),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"delimiter"),(0,i.kt)("td",{parentName:"tr",align:null},"This parameter specifies how events must be separated when multiple events are received. This must be whole line and not a single character."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("del",{parentName:"td"}),(0,i.kt)("del",{parentName:"td"}),"~~"),(0,i.kt)("td",{parentName:"tr",align:null},"STRING"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes"),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"new.line.character"),(0,i.kt)("td",{parentName:"tr",align:null},"This attribute indicates the new line character of the event that is expected to be received. This is used mostly when communication between 2 types of operating systems is expected. For example, Linux uses ",(0,i.kt)("inlineCode",{parentName:"td"},"\\n")," as the end of line character whereas windows uses ",(0,i.kt)("inlineCode",{parentName:"td"},"\\r\\n"),"."),(0,i.kt)("td",{parentName:"tr",align:null},"\\","n"),(0,i.kt)("td",{parentName:"tr",align:null},"STRING"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes"),(0,i.kt)("td",{parentName:"tr",align:null},"No")))),(0,i.kt)("h2",{id:"example-1"},"Example 1"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"CREATE SOURCE FooStream WITH (type='inMemory', topic='stock', map.type='text') (symbol string, price float, volume long);\n")),(0,i.kt)("p",null,'This query performs a default text input mapping. The expected input is\nas follows: symbol:"gdn", price:55.6, volume:100 OR symbol:',(0,i.kt)("inlineCode",{parentName:"p"},"gdn"),',\nprice:55.6, volume:100 If group events is enabled then input should be\nas follows: symbol:"gdn", price:55.6, volume:100 ',(0,i.kt)("del",{parentName:"p"}),(0,i.kt)("del",{parentName:"p"}),'~~\nsymbol:"gdn", price:55.6, volume:100'),(0,i.kt)("h2",{id:"example-2"},"Example 2"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"CREATE SOURCE FooStream WITH (type='inMemory', topic='stock', map.type='text', map.fail.on.missing.attribute='true', map.regex.A='(\\w+)\\s([-0-9]+)', map.regex.B='volume\\s([-0-9]+)', map.attributes=\"symbol='A[1]', price='A[2]', volume='B'\") (symbol string, price float, volume long);\n")),(0,i.kt)("p",null,"This query performs a custom text mapping. The expected input is as\nfollows: wos2 550 volume 100 If group events is enabled then input\nshould be as follows: wos2 550 volume 100 ",(0,i.kt)("del",{parentName:"p"}),(0,i.kt)("del",{parentName:"p"}),"~~ wos2 550\nvolume 100 ",(0,i.kt)("del",{parentName:"p"}),(0,i.kt)("del",{parentName:"p"}),"~~ wos2 550 volume 100"))}d.isMDXComponent=!0}}]);