"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[36e3],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return d}});var r=t(67294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=u(t),d=s,b=m["".concat(l,".").concat(d)]||m[d]||p[d]||o;return t?r.createElement(b,a(a({ref:n},c),{},{components:t})):r.createElement(b,a({ref:n},c))}));function d(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var o=t.length,a=new Array(o);a[0]=m;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,a[1]=i;for(var u=2;u<o;u++)a[u]=t[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},85162:function(e,n,t){t.d(n,{Z:function(){return a}});var r=t(67294),s=t(34334),o="tabItem_Ymn6";function a(e){var n=e.children,t=e.hidden,a=e.className;return r.createElement("div",{role:"tabpanel",className:(0,s.Z)(o,a),hidden:t},n)}},65488:function(e,n,t){t.d(n,{Z:function(){return d}});var r=t(83117),s=t(67294),o=t(34334),a=t(72389),i=t(67392),l=t(7094),u=t(12466),c="tabList__CuJ",p="tabItem_LNqP";function m(e){var n,t,a=e.lazy,m=e.block,d=e.defaultValue,b=e.values,f=e.groupId,g=e.className,h=s.Children.map(e.children,(function(e){if((0,s.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=b?b:h.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),E=(0,i.l)(v,(function(e,n){return e.value===n.value}));if(E.length>0)throw new Error('Docusaurus error: Duplicate values "'+E.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===d?d:null!=(n=null!=d?d:null==(t=h.find((function(e){return e.props.default})))?void 0:t.props.value)?n:h[0].props.value;if(null!==y&&!v.some((function(e){return e.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var _=(0,l.U)(),N=_.tabGroupChoices,w=_.setTabGroupChoices,A=(0,s.useState)(y),S=A[0],T=A[1],k=[],M=(0,u.o5)().blockElementScrollPositionUntilNextRender;if(null!=f){var R=N[f];null!=R&&R!==S&&v.some((function(e){return e.value===R}))&&T(R)}var O=function(e){var n=e.currentTarget,t=k.indexOf(n),r=v[t].value;r!==S&&(M(n),T(r),null!=f&&w(f,String(r)))},P=function(e){var n,t=null;switch(e.key){case"ArrowRight":var r,s=k.indexOf(e.currentTarget)+1;t=null!=(r=k[s])?r:k[0];break;case"ArrowLeft":var o,a=k.indexOf(e.currentTarget)-1;t=null!=(o=k[a])?o:k[k.length-1]}null==(n=t)||n.focus()};return s.createElement("div",{className:(0,o.Z)("tabs-container",c)},s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":m},g)},v.map((function(e){var n=e.value,t=e.label,a=e.attributes;return s.createElement("li",(0,r.Z)({role:"tab",tabIndex:S===n?0:-1,"aria-selected":S===n,key:n,ref:function(e){return k.push(e)},onKeyDown:P,onFocus:O,onClick:O},a,{className:(0,o.Z)("tabs__item",p,null==a?void 0:a.className,{"tabs__item--active":S===n})}),null!=t?t:n)}))),a?(0,s.cloneElement)(h.filter((function(e){return e.props.value===S}))[0],{className:"margin-top--md"}):s.createElement("div",{className:"margin-top--md"},h.map((function(e,n){return(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==S})}))))}function d(e){var n=(0,a.Z)();return s.createElement(m,(0,r.Z)({key:String(n)},e))}},51006:function(e,n,t){t.r(n),t.d(n,{assets:function(){return m},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return u},metadata:function(){return p},toc:function(){return d}});var r=t(83117),s=t(80102),o=(t(67294),t(3905)),a=t(65488),i=t(85162),l=["components"],u={sidebar_position:1,title:"Using Rest APIs"},c=void 0,p={unversionedId:"streams/tutorials/using_rest_api",id:"streams/tutorials/using_rest_api",title:"Using Rest APIs",description:"Today\u2019s applications are required to be highly responsive and always online. They need to be deployed in datacenters closer to their users and can access data instantly across the globe.",source:"@site/docs/streams/tutorials/using_rest_api.md",sourceDirName:"streams/tutorials",slug:"/streams/tutorials/using_rest_api",permalink:"/docs/streams/tutorials/using_rest_api",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/streams/tutorials/using_rest_api.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Using Rest APIs"},sidebar:"tutorialSidebar",previous:{title:"Quickstart",permalink:"/docs/streams/quickstart"},next:{title:"Pub-Sub with Streams",permalink:"/docs/streams/tutorials/pub-sub-streams"}},m={},d=[{value:"Pre-Requiste",id:"pre-requiste",level:2},{value:"API Browser",id:"api-browser",level:2},{value:"Pub-Sub with Streams",id:"pub-sub-with-streams",level:2}],b={toc:d};function f(e){var n=e.components,u=(0,s.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},b,u,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Today\u2019s applications are required to be highly responsive and always online. They need to be deployed in datacenters closer to their users and can access data instantly across the globe. "),(0,o.kt)("p",null,"Macrometa global data network (GDN) is a fully managed realtime materialzed view engine that provides access to data instantly to Apps & APIs in a simple & single interface. "),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"If you are new to Macrometa GDN, we strongly recommend reading ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"/docs/what-is-macrometa"},"What is Macrometa")),".")),(0,o.kt)("h2",{id:"pre-requiste"},"Pre-Requiste"),(0,o.kt)("p",null,"A tenant account (and credentials) with Macrometa GDN."),(0,o.kt)("h2",{id:"api-browser"},"API Browser"),(0,o.kt)("p",null,"Your best friend when working with REST APIs is the REST API browser available in ",(0,o.kt)("a",{parentName:"p",href:"https://gdn.paas.macrometa.io"},"GDN")," GUI. From there, you can execute various rest apis and see exactly what the inputs and outputs are."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"GDN API Browser",src:t(25369).Z,width:"1000",height:"503"})),(0,o.kt)("h2",{id:"pub-sub-with-streams"},"Pub-Sub with Streams"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"GDN streams")," is a high-performance solution for server-to-server messaging."),(0,o.kt)("p",null,"It provides,"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Seamless geo-replication of messages across regions,"),(0,o.kt)("li",{parentName:"ul"},"Very low publish and end-to-end latency,"),(0,o.kt)("li",{parentName:"ul"},"Seamless scalability to over a million topics."),(0,o.kt)("li",{parentName:"ul"},"Multiple subscription modes (",(0,o.kt)("inlineCode",{parentName:"li"},"exclusive"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"shared"),", and ",(0,o.kt)("inlineCode",{parentName:"li"},"failover"),") for streams."),(0,o.kt)("li",{parentName:"ul"},"Guaranteed message delivery with persistent message storage.")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Streams")," are built on the ",(0,o.kt)("em",{parentName:"p"},"publish-subscribe")," pattern, aka pub-sub. In this pattern, producers publish messages to streams. Consumers can then subscribe to those streams, process incoming messages, and send an acknowledgement when processing is complete."),(0,o.kt)(a.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'class APIRequest {\n  _headers = {\n    Accept: "application/json",\n    "Content-Type": "application/json",\n  };\n\n  constructor(url) {\n    this._url = url;\n  }\n\n  login(email, password) {\n    const endpoint = "/_open/auth";\n\n    const self = this;\n\n    return new Promise(function (resolve, reject) {\n      self\n        .req(endpoint, {\n          body: { email, password },\n          method: "POST",\n        })\n        .then(({ jwt, ...data }) => {\n          self._headers.authorization = `bearer ${jwt}`;\n          resolve(data);\n        })\n        .catch(reject);\n    });\n  }\n\n  _handleResponse(response, resolve, reject) {\n    if (response.ok) {\n      resolve(response.json());\n    } else {\n      reject(response);\n    }\n  }\n\n  req(endpoint, { body, ...options } = {}) {\n    const self = this;\n    return new Promise(function (resolve, reject) {\n      fetch(self._url + endpoint, {\n        headers: self._headers,\n        body: body ? JSON.stringify(body) : undefined,\n        ...options,\n      }).then((response) => self._handleResponse(response, resolve, reject));\n    });\n  }\n}\n\nconst EMAIL = "nemo@nautilus.com";\nconst PASSWORD = "xxxxxx";\nconst FEDERATION_NAME = api-gdn.paas.macrometa.io";\nconst FEDERATION_URL = `https://${FEDERATION_NAME}`;\n\nconst STREAM_NAME = "api_tutorial_streams";\nconst CONSUMER_NAME = "api_tutorial_streams_consumer";\nconst IS_GLOBAL = true;\n\nconst run = async function () {\n  try {\n    const connection = new APIRequest(FEDERATION_URL);\n\n    /* -------------------- Login (nemo@nautilus.com/xxxxxx) -------------------- */\n\n    const { tenant } = await connection.login(EMAIL, PASSWORD);\n\n    console.log("Login Successfully using", tenant);\n    /* ------------------------------ Create Stream ----------------------------- */\n\n    const stream = await connection.req(\n      `/_fabric/_system/streams/${STREAM_NAME}?global=${IS_GLOBAL}`,\n      {\n        body: { name: STREAM_NAME },\n        method: "POST",\n      }\n    );\n\n    console.log("STREAM CREATED SUCCESSFULLY", stream);\n\n    /* ----------------- Publish and Subscribe message to stream ---------------- */\n\n    const region = IS_GLOBAL ? "c8global" : "c8local";\n    const streamName = `${region}s.${STREAM_NAME}`;\n    const url = IS_GLOBAL\n      ? FEDERATION_NAME : `api-${streamApp.streamApps[0].regions[0]}.prod.macrometa.io`\n\n    const consumerUrl = `wss://${url}/_ws/ws/v2/consumer/persistent/${tenant}/${region}._system/${streamName}/${CONSUMER_NAME}`;\n\n    const producerUrl = `wss://${url}/_ws/ws/v2/producer/persistent/${tenant}/${region}._system/${streamName}`;\n\n    var consumer;\n    var producer;\n    var producer_interval;\n\n    /* -------------------------- Initalizing Consumer -------------------------- */\n\n    const initConsumer = () => {\n      return new Promise((resolve) => {\n        consumer = new WebSocket(consumerUrl);\n\n        consumer.onopen = function () {\n          console.log("WebSocket:Consumer is open now for " + streamName);\n          resolve();\n        };\n\n        consumer.onerror = function () {\n          console.log(\n            "Failed to establish WebSocket:Consumer connection for " +\n              streamName\n          );\n        };\n\n        consumer.onclose = function () {\n          console.log("Closed WebSocket:Consumer connection for " + streamName);\n        };\n\n        consumer.onmessage = function (message) {\n          var receivedMsg = message.data && JSON.parse(message.data);\n\n          console.log(\n            `WebSocket:Consumer message received at ${new Date()}`,\n            receivedMsg\n          );\n\n          const ackMsg = { messageId: receivedMsg.messageId };\n          consumer.send(JSON.stringify(ackMsg));\n        };\n      });\n    };\n\n    /* -------------------------- Initalizing Producer -------------------------- */\n\n    const initProducer = () => {\n      producer = new WebSocket(producerUrl);\n\n      producer.onopen = function () {\n        console.log("WebSocket:Producer is open now for " + streamName);\n        producer_interval = setInterval(function () {\n          console.log(`WebSocket:Producer message sent at ${new Date()}`);\n          producer.send(JSON.stringify({ payload: `test` }));\n        }, 10000);\n      };\n\n      producer.onclose = function (e) {\n        console.log("Closed WebSocket:Producer connection for " + streamName);\n        clearInterval(producer_interval);\n      };\n\n      producer.onerror = function (e) {\n        console.log(\n          "Failed to establish WebSocket:Producer connection for " + streamName\n        );\n      };\n    };\n\n    initConsumer().then(() => {\n      initProducer();\n    });\n\n    await new Promise((resolve) => setTimeout(resolve, 1 * 40 * 1000));\n\n    consumer.close();\n    console.log("CONSUMER CLOSING...");\n    producer.close();\n    console.log("PRODUCER CLOSING...");\n\n    await new Promise((resolve) => setTimeout(resolve, 5000));\n\n    /* ------------------------ Unsubscribe from stream. ------------------------ */\n\n    const consumerUnsubscribe = await connection.req(\n      `/_fabric/_system/_api/streams/unsubscribe/${CONSUMER_NAME}`,\n      {\n        method: "POST",\n      }\n    );\n\n    console.log(\n      `${CONSUMER_NAME} UNSUBSCRIBED SUCCESSFULLY`,\n      consumerUnsubscribe\n    );\n\n    /* ------------------------------ Delete topic ------------------------------ */\n  } catch (e) {\n    console.error(e);\n  }\n};\n\nrun();\n'))),(0,o.kt)(i.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},'import requests\nimport json\nfrom websocket import create_connection\nimport base64\nimport six\n\n# Constants\n\nFEDERATION = "api-gdn.paas.macrometa.io"\nFED_URL = f"https://{FEDERATION}"\nEMAIL = "nemo@nautilus.com"\nPASSWORD = "xxxxxx"\nFABRIC = "_system"\nSTREAM_NAME = "teststream"\nAUTH_TOKEN = "bearer "\nTENANT_NAME = "xxxxxx"\nCONSUMER_NAME = "testconsumer"\n\n# Create a HTTPS Session\n\nurl = f"{FED_URL}/_open/auth"\npayload = {\n    \'email\': EMAIL,\n    \'password\': PASSWORD\n}\nheaders = {\n    \'content-type\': \'application/json\'\n}\n\nresponse = requests.post(url, data=json.dumps(payload), headers=headers)\n\nif response.status_code == 200:\n    resp_body = json.loads(response.text)\n    AUTH_TOKEN += resp_body["jwt"]\n    TENANT = resp_body["tenant"]\nelse:\n    raise Exception(f"Error while getting auth token. Code:{response.status_code}, Reason:{response.reason}")\n\nsession = requests.session()\nsession.headers.update({"content-type": \'application/json\'})\nsession.headers.update({"authorization": AUTH_TOKEN})\n\n\n# Create a stream\n# Note:- For a global stream pass global=true and global=false for local stream\nurl = f"{FED_URL}/_fabric/{FABRIC}/_api/streams/{STREAM_NAME}?global=true"\nresp = session.post(url)\nprint("\\nStream Created: ", resp.text)\n\n# Publish Messages\n# Send message in body\nSTREAM_TYPE = "c8global"\n\nurl = f"{FED_URL}/_fabric/{FABRIC}/_api/streams/{STREAM_TYPE}s.{STREAM_NAME}/publish?global=true"\nresp = session.post(url, data="Hello")\nprint("\\nMessage Posted: ", resp.text)\n\n# or\n\nproducerurl = f"wss://{FEDERATION}/_ws/ws/v2/producer/persistent/{TENANT_NAME}/{STREAM_TYPE}.{FABRIC}/{STREAM_TYPE}s.{STREAM_NAME}"\n\n\nws = create_connection(producerurl, header=[f"Authorization: {AUTH_TOKEN}"])\npayload = {\n    "payload": base64.b64encode(\n        six.b("Hello World")\n    ).decode("utf-8")\n}\nws.send(json.dumps(payload))\nresponse = json.loads(ws.recv())\nif response[\'result\'] == \'ok\':\n    print("Message published successfully")\nelse:\n    print(f"Failed to publish message: {response}")\nws.close()\n\n# # # Subscribe\n\nconsumerurl = f"wss://{FEDERATION}/_ws/ws/v2/producer/persistent/{TENANT_NAME}/{STREAM_TYPE}.{FABRIC}/{STREAM_TYPE}s.{STREAM_NAME}/{CONSUMER_NAME}"\n\nws = create_connection(consumerurl, header=[f"Authorization: {AUTH_TOKEN}"])\nwhile True:\n    msg = json.loads(ws.recv())\n    if msg:\n        print(f"received: {base64.b64decode(msg[\'payload\'])}")\n        # Acknowledge successful processing\n        ws.send(json.dumps({\'messageId\': msg[\'messageId\']}))\n        break\nws.close()\n\n# Delete Subscription/ Unsubscribe\nurl = f"{FED_URL}/_fabric/{FABRIC}/_api/streams/{STREAM_TYPE}s.{STREAM_NAME}/subscriptions/{CONSUMER_NAME}?global=true"\nresp = session.delete(url)\nprint("Subsrcription Deleted: ", resp.text)\n')))))}f.isMDXComponent=!0},25369:function(e,n,t){n.Z=t.p+"assets/images/gdn-api-browser-f33b2f2731586d97e46383d9b86d6b2e.png"}}]);