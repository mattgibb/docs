"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[54303],{3905:function(e,t,a){a.d(t,{Zo:function(){return u},kt:function(){return f}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(a),f=r,d=c["".concat(p,".").concat(f)]||c[f]||m[f]||o;return a?n.createElement(d,i(i({ref:t},u),{},{components:a})):n.createElement(d,i({ref:t},u))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},93817:function(e,t,a){a.r(t),a.d(t,{assets:function(){return u},contentTitle:function(){return p},default:function(){return f},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return m}});var n=a(83117),r=a(80102),o=(a(67294),a(3905)),i=["components"],l={title:"protobuf (Sink Mapper)"},p=void 0,s={unversionedId:"cep/reference/functions/sinkmapper/protobuf",id:"cep/reference/functions/sinkmapper/protobuf",title:"protobuf (Sink Mapper)",description:"This output mapper allows you to convert Events to protobuf messages before publishing them. To work with this mapper you have to add auto-generated protobuf classes to the project classpath. When you use this output mapper, you can either define stream attributes as the same names as the protobuf message attributes or you can use custom mapping to map stream definition attributes with the protobuf attributes. When you use this mapper with stream processor-io-grpc you don't have to provide the protobuf message class in the class parameter.",source:"@site/docs/cep/reference/functions/sinkmapper/protobuf.md",sourceDirName:"cep/reference/functions/sinkmapper",slug:"/cep/reference/functions/sinkmapper/protobuf",permalink:"/docs/cep/reference/functions/sinkmapper/protobuf",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/cep/reference/functions/sinkmapper/protobuf.md",tags:[],version:"current",frontMatter:{title:"protobuf (Sink Mapper)"},sidebar:"tutorialSidebar",previous:{title:"passThrough (Sink Mapper)",permalink:"/docs/cep/reference/functions/sinkmapper/passThrough"},next:{title:"text (Sink Mapper)",permalink:"/docs/cep/reference/functions/sinkmapper/text"}},u={},m=[{value:"Query Parameters",id:"query-parameters",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Example 3",id:"example-3",level:2},{value:"Example 4",id:"example-4",level:2}],c={toc:m};function f(e){var t=e.components,a=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This output mapper allows you to convert Events to protobuf messages before publishing them. To work with this mapper you have to add auto-generated protobuf classes to the project classpath. When you use this output mapper, you can either define stream attributes as the same names as the protobuf message attributes or you can use custom mapping to map stream definition attributes with the protobuf attributes. When you use this mapper with ",(0,o.kt)("inlineCode",{parentName:"p"},"stream processor-io-grpc")," you don't have to provide the protobuf message class in the ",(0,o.kt)("inlineCode",{parentName:"p"},"class")," parameter."),(0,o.kt)("p",null,"Syntax"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'CREATE SINK <NAME> WITH (type="protobuf", class="<STRING>")\n')),(0,o.kt)("h2",{id:"query-parameters"},"Query Parameters"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Name"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"),(0,o.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,o.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,o.kt)("th",{parentName:"tr",align:null},"Optional"),(0,o.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"class"),(0,o.kt)("td",{parentName:"tr",align:null},"This specifies the class name of the protobuf message class, If sink type is grpc then it's not necessary to provide this parameter."),(0,o.kt)("td",{parentName:"tr",align:null},"-"),(0,o.kt)("td",{parentName:"tr",align:null},"STRING"),(0,o.kt)("td",{parentName:"tr",align:null},"Yes"),(0,o.kt)("td",{parentName:"tr",align:null},"No")))),(0,o.kt)("h2",{id:"example-1"},"Example 1"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"CREATE SINK BarStream WITH (type='inMemory', topic='test01', map.type='protobuf', map.class='io.streamprocessor.extension.map.protobuf.autogenerated.Request') (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double);\n")),(0,o.kt)("p",null,"This will map ",(0,o.kt)("inlineCode",{parentName:"p"},"BarStream")," values into ",(0,o.kt)("inlineCode",{parentName:"p"},"io.streamprocessor.extension.map.protobuf.autogenerated.Request")," protobuf message type."),(0,o.kt)("h2",{id:"example-2"},"Example 2"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"CREATE SINK BarStream WITH (type='grpc', publisher.url='grpc://localhost:2000/org.gdn.grpc.test.MyService/process, map.type='protobuf') (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double)\n")),(0,o.kt)("p",null,"Above definition will map ",(0,o.kt)("inlineCode",{parentName:"p"},"BarStream")," values into the protobuf messages. Since this is a ",(0,o.kt)("inlineCode",{parentName:"p"},"grpc")," sink, protobuf mapper will get the type of the protobuf class by the ",(0,o.kt)("inlineCode",{parentName:"p"},"publisher.url"),"."),(0,o.kt)("h2",{id:"example-3"},"Example 3"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"CREATE SINK BarStream WITH (type='grpc', publisher.url = 'grpc://localhost:2000/org.gdn.grpc.test.MyService/process, map.type='protobuf', map.payload=\"stringValue='a',longValue='b',intValue='c',booleanValue='d',floatValue = 'e', doubleValue  = 'f'\") (a string, b long, c int,d bool,e float,f double);\n")),(0,o.kt)("p",null,"This will map BarStream values to request message type of the ",(0,o.kt)("inlineCode",{parentName:"p"},"process"),"\nmethod in ",(0,o.kt)("inlineCode",{parentName:"p"},"MyService")," service. and stream values will map like this, -\nvalue of ",(0,o.kt)("inlineCode",{parentName:"p"},"a")," will be assign ",(0,o.kt)("inlineCode",{parentName:"p"},"stringValue")," variable in the message class"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"value of ",(0,o.kt)("inlineCode",{parentName:"li"},"b")," will be assign ",(0,o.kt)("inlineCode",{parentName:"li"},"longValue")," variable in the message class"),(0,o.kt)("li",{parentName:"ul"},"value of ",(0,o.kt)("inlineCode",{parentName:"li"},"c")," will be assign ",(0,o.kt)("inlineCode",{parentName:"li"},"intValue")," variable in the message class -\nvalue of ",(0,o.kt)("inlineCode",{parentName:"li"},"d")," will be assign ",(0,o.kt)("inlineCode",{parentName:"li"},"booleanValue")," variable in the message class"),(0,o.kt)("li",{parentName:"ul"},"value of ",(0,o.kt)("inlineCode",{parentName:"li"},"e")," will be assign ",(0,o.kt)("inlineCode",{parentName:"li"},"floatValue")," variable in the message class"),(0,o.kt)("li",{parentName:"ul"},"value of ",(0,o.kt)("inlineCode",{parentName:"li"},"f")," will be assign ",(0,o.kt)("inlineCode",{parentName:"li"},"doubleValue")," variable in the message\nclass")),(0,o.kt)("h2",{id:"example-4"},"Example 4"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"CREATE SINK BarStream WITH (type='inMemory', topic='test01', map.type='protobuf', map.class='io.streamprocessor.extension.map.protobuf.autogenerated.RequestWithList') (stringValue string,intValue int,stringList object, intList object);\n")),(0,o.kt)("p",null,"This will map ",(0,o.kt)("inlineCode",{parentName:"p"},"BarStream")," values into ",(0,o.kt)("inlineCode",{parentName:"p"},"io.streamprocessor.extension.map.protobuf.autogenerated.RequestWithList"),". If you want to map data types other than the scalar data types, you have to use ",(0,o.kt)("inlineCode",{parentName:"p"},"object")," as the data type as shown in above(",(0,o.kt)("inlineCode",{parentName:"p"},"stringList object"),")."))}f.isMDXComponent=!0}}]);