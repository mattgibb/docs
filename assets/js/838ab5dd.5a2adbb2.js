"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[57549],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return c}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),s=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,u=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=s(n),c=r,N=m["".concat(u,".").concat(c)]||m[c]||p[c]||l;return n?a.createElement(N,i(i({ref:t},d),{},{components:n})):a.createElement(N,i({ref:t},d))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=m;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var s=2;s<l;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},91216:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return u},default:function(){return c},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return p}});var a=n(83117),r=n(80102),l=(n(67294),n(3905)),i=["components"],o={title:"rabbitmq (Source)"},u=void 0,s={unversionedId:"cep/reference/functions/source/rabbitmq",id:"cep/reference/functions/source/rabbitmq",title:"rabbitmq (Source)",description:"The rabbitmq source receives the events from the rabbitmq broker via the",source:"@site/docs/cep/reference/functions/source/rabbitmq.md",sourceDirName:"cep/reference/functions/source",slug:"/cep/reference/functions/source/rabbitmq",permalink:"/docs/cep/reference/functions/source/rabbitmq",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/cep/reference/functions/source/rabbitmq.md",tags:[],version:"current",frontMatter:{title:"rabbitmq (Source)"},sidebar:"tutorialSidebar",previous:{title:"prometheus (Source)",permalink:"/docs/cep/reference/functions/source/prometheus"},next:{title:"tcp (Source)",permalink:"/docs/cep/reference/functions/source/tcp"}},d={},p=[{value:"Query Parameters",id:"query-parameters",level:2},{value:"Example 1",id:"example-1",level:2}],m={toc:p};function c(e){var t=e.components,n=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"The rabbitmq source receives the events from the rabbitmq broker via the\nAMQP protocol."),(0,l.kt)("p",null,"Syntax"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'CREATE SOURCE <NAME> WITH (type="rabbitmq", map.type="<STRING>", uri="<STRING>", heartbeat="<INT>", exchange.name="<STRING>", exchange.type="<STRING>", exchange.durable.enabled="<BOOL>", exchange.autodelete.enabled="<BOOL>", routing.key="<STRING>", headers="<STRING>", queue.name="<STRING>", queue.durable.enabled="<BOOL>", queue.exclusive.enabled="<BOOL>", queue.autodelete.enabled="<BOOL>", tls.enabled="<BOOL>", tls.truststore.path="<STRING>", tls.truststore.password="<STRING>", tls.truststore.type="<STRING>", tls.version="<STRING>", auto.ack="<BOOL>")\n')),(0,l.kt)("h2",{id:"query-parameters"},"Query Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,l.kt)("th",{parentName:"tr",align:null},"Optional"),(0,l.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"uri"),(0,l.kt)("td",{parentName:"tr",align:null},"The URI that is used to connect to an AMQP server. If no URI is specified,an error is logged in the CLI.e.g., ",(0,l.kt)("inlineCode",{parentName:"td"},"amqp://guest:guest"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"amqp://guest:guest@localhost:5672")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"STRING"),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},"No")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"heartbeat"),(0,l.kt)("td",{parentName:"tr",align:null},"The period of time (in seconds) after which the peer TCP connection should be considered unreachable (down) by RabbitMQ and client libraries."),(0,l.kt)("td",{parentName:"tr",align:null},"60"),(0,l.kt)("td",{parentName:"tr",align:null},"INT"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null},"No")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"exchange.name"),(0,l.kt)("td",{parentName:"tr",align:null},"The name of the exchange that decides what to do with a message it receives.If the ",(0,l.kt)("inlineCode",{parentName:"td"},"exchange.name")," already exists in the RabbitMQ server, then the system uses that ",(0,l.kt)("inlineCode",{parentName:"td"},"exchange.name")," instead of redeclaring."),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"STRING"),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},"No")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"exchange.type"),(0,l.kt)("td",{parentName:"tr",align:null},"The type of the exchange name. The exchange types available are ",(0,l.kt)("inlineCode",{parentName:"td"},"direct"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"fanout"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"topic")," and ",(0,l.kt)("inlineCode",{parentName:"td"},"headers"),". For a detailed description of each type, see ","[","RabbitMQ - AMQP Concepts","]","(",(0,l.kt)("a",{parentName:"td",href:"https://www.rabbitmq.com/tutorials/amqp-concepts.html"},"https://www.rabbitmq.com/tutorials/amqp-concepts.html"),")."),(0,l.kt)("td",{parentName:"tr",align:null},"direct"),(0,l.kt)("td",{parentName:"tr",align:null},"STRING"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null},"No")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"exchange.durable.enabled"),(0,l.kt)("td",{parentName:"tr",align:null},"If this is set to ",(0,l.kt)("inlineCode",{parentName:"td"},"true"),", the exchange remains declared even if the broker restarts."),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"BOOL"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null},"No")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"exchange.autodelete.enabled"),(0,l.kt)("td",{parentName:"tr",align:null},"If this is set to ",(0,l.kt)("inlineCode",{parentName:"td"},"true"),", the exchange is automatically deleted when it is not used anymore."),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"BOOL"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null},"No")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"routing.key"),(0,l.kt)("td",{parentName:"tr",align:null},"The key based on which the exchange determines how to route the message to queues. The routing key is like an address for the message. The routing.key must be initialized when the value for the ",(0,l.kt)("inlineCode",{parentName:"td"},"exchange.type")," parameter is ",(0,l.kt)("inlineCode",{parentName:"td"},"direct")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"topic"),"."),(0,l.kt)("td",{parentName:"tr",align:null},"empty"),(0,l.kt)("td",{parentName:"tr",align:null},"STRING"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null},"No")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"headers"),(0,l.kt)("td",{parentName:"tr",align:null},"The headers of the message. The attributes used for routing are taken from the this paremeter. A message is considered matching if the value of the header equals the value specified upon binding."),(0,l.kt)("td",{parentName:"tr",align:null},"null"),(0,l.kt)("td",{parentName:"tr",align:null},"STRING"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null},"No")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"queue.name"),(0,l.kt)("td",{parentName:"tr",align:null},"A queue is a buffer that stores messages. If the queue name already exists in the RabbitMQ server, then the system usees that queue name instead of redeclaring it. If no value is specified for this parameter, the system uses the unique queue name that is automatically generated by the RabbitMQ server."),(0,l.kt)("td",{parentName:"tr",align:null},"system generated queue name"),(0,l.kt)("td",{parentName:"tr",align:null},"STRING"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null},"No")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"queue.durable.enabled"),(0,l.kt)("td",{parentName:"tr",align:null},"If this parameter is set to ",(0,l.kt)("inlineCode",{parentName:"td"},"true"),", the queue remains declared even if the broker restarts"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"BOOL"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null},"No")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"queue.exclusive.enabled"),(0,l.kt)("td",{parentName:"tr",align:null},"If this parameter is set to ",(0,l.kt)("inlineCode",{parentName:"td"},"true"),", the queue is exclusive for the current connection. If it is set to ",(0,l.kt)("inlineCode",{parentName:"td"},"false"),", it is also consumable by other connections."),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"BOOL"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null},"No")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"queue.autodelete.enabled"),(0,l.kt)("td",{parentName:"tr",align:null},"If this parameter is set to ",(0,l.kt)("inlineCode",{parentName:"td"},"true"),", the queue is automatically deleted when it is not used anymore."),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"BOOL"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null},"No")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"tls.enabled"),(0,l.kt)("td",{parentName:"tr",align:null},"This parameter specifies whether an encrypted communication channel should be established or not. When this parameter is set to ",(0,l.kt)("inlineCode",{parentName:"td"},"true"),", the ",(0,l.kt)("inlineCode",{parentName:"td"},"tls.truststore.path")," and ",(0,l.kt)("inlineCode",{parentName:"td"},"tls.truststore.password")," parameters are initialized."),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"BOOL"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null},"No")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"tls.truststore.path"),(0,l.kt)("td",{parentName:"tr",align:null},"The file path to the location of the truststore of the client that receives the RabbitMQ events via the ",(0,l.kt)("inlineCode",{parentName:"td"},"AMQP")," protocol. A custom client-truststore can be specified if required. If a custom truststore is not specified, then the system uses the default client-trustore in the ",(0,l.kt)("inlineCode",{parentName:"td"},"${carbon.home}/resources/security")," directory."),(0,l.kt)("td",{parentName:"tr",align:null},"\\${carbon.home}/resources/security/client-truststore.jks"),(0,l.kt)("td",{parentName:"tr",align:null},"STRING"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null},"No")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"tls.truststore.password"),(0,l.kt)("td",{parentName:"tr",align:null},"The password for the client-truststore. A custom password can be specified if required. If no custom password is specified, then the system uses ",(0,l.kt)("inlineCode",{parentName:"td"},"gdncarbon")," as the default password."),(0,l.kt)("td",{parentName:"tr",align:null},"gdncarbon"),(0,l.kt)("td",{parentName:"tr",align:null},"STRING"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null},"No")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"tls.truststore.type"),(0,l.kt)("td",{parentName:"tr",align:null},"The type of the truststore."),(0,l.kt)("td",{parentName:"tr",align:null},"JKS"),(0,l.kt)("td",{parentName:"tr",align:null},"STRING"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null},"No")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"tls.version"),(0,l.kt)("td",{parentName:"tr",align:null},"The version of the tls/ssl."),(0,l.kt)("td",{parentName:"tr",align:null},"SSL"),(0,l.kt)("td",{parentName:"tr",align:null},"STRING"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null},"No")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"auto.ack"),(0,l.kt)("td",{parentName:"tr",align:null},"If this parameter is set to ",(0,l.kt)("inlineCode",{parentName:"td"},"false"),", the server should expect explicit messages acknowledgements once delivered"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"BOOL"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null},"No")))),(0,l.kt)("h2",{id:"example-1"},"Example 1"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"@App:name('TestExecutionPlan')\nCREATE STREAM FooStream (symbol string, price float, volume long);\n\n@info(name = 'query1')\nCREATE SOURCE BarStream WITH (type ='rabbitmq', uri = 'amqp://guest:guest@localhost:5672', exchange.name = 'direct', routing.key= 'direct', map.type='xml') (symbol string, price float, volume long);\n\ninsert into BarStream\nfrom FooStream select symbol, price, volume ;\n")),(0,l.kt)("p",null,"This query receives events from the ",(0,l.kt)("inlineCode",{parentName:"p"},"direct")," exchange with the\n",(0,l.kt)("inlineCode",{parentName:"p"},"direct"),"exchange type, and the ",(0,l.kt)("inlineCode",{parentName:"p"},"directTest")," routing key."))}c.isMDXComponent=!0}}]);