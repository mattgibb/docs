"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[78002],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return m}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,u=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),d=c(n),m=i,f=d["".concat(u,".").concat(m)]||d[m]||s[m]||a;return n?r.createElement(f,o(o({ref:t},l),{},{components:n})):r.createElement(f,o({ref:t},l))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var p={};for(var u in t)hasOwnProperty.call(t,u)&&(p[u]=t[u]);p.originalType=e,p.mdxType="string"==typeof e?e:i,o[1]=p;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},45667:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return u},default:function(){return m},frontMatter:function(){return p},metadata:function(){return c},toc:function(){return s}});var r=n(83117),i=n(80102),a=(n(67294),n(3905)),o=["components"],p={sidebar_position:80,title:"Script"},u=void 0,c={unversionedId:"cep/query-guide/script",id:"cep/query-guide/script",title:"Script",description:"Scripts allow you to write functions in other programming languages and execute them within Stream queries. Functions defined via scripts can be accessed in queries similar to any other inbuilt function. Function definitions can be used to define these scripts.",source:"@site/docs/cep/query-guide/script.md",sourceDirName:"cep/query-guide",slug:"/cep/query-guide/script",permalink:"/docs/cep/query-guide/script",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/cep/query-guide/script.md",tags:[],version:"current",sidebarPosition:80,frontMatter:{sidebar_position:80,title:"Script"},sidebar:"tutorialSidebar",previous:{title:"Trigger",permalink:"/docs/cep/query-guide/trigger"},next:{title:"Store",permalink:"/docs/cep/query-guide/store"}},l={},s=[],d={toc:s};function m(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Scripts allow you to write functions in other programming languages and execute them within Stream queries. Functions defined via scripts can be accessed in queries similar to any other inbuilt function. ",(0,a.kt)("strong",{parentName:"p"},"Function definitions")," can be used to define these scripts."),(0,a.kt)("p",null,"Function parameters are passed into the function logic as ",(0,a.kt)("inlineCode",{parentName:"p"},"Object[]")," and with the name ",(0,a.kt)("inlineCode",{parentName:"p"},"data")," ."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Purpose")),(0,a.kt)("p",null,"Scripts allow you to define a function operation that is not provided in Stream core or its extension. It is not required to write an extension to define the function logic."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Syntax")),(0,a.kt)("p",null,"The syntax for a Script definition is as follows."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"define function <function name>[<language name>] return <return type> {\n    <operation of the function>\n};\n")),(0,a.kt)("p",null,"The following parameters are configured when defining a script."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"function name")),(0,a.kt)("td",{parentName:"tr",align:null},"The name of the function (",(0,a.kt)("inlineCode",{parentName:"td"},"camelCase")," is used for the function name) as a convention.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"language name")),(0,a.kt)("td",{parentName:"tr",align:null},"The name of the programming language used to define the script, such as ",(0,a.kt)("inlineCode",{parentName:"td"},"javascript"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"r")," and ",(0,a.kt)("inlineCode",{parentName:"td"},"scala"),".")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"return type")),(0,a.kt)("td",{parentName:"tr",align:null},"The attribute type of the function\u2019s return. This can be ",(0,a.kt)("inlineCode",{parentName:"td"},"int"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"long"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"float"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"double"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"string"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"bool")," or ",(0,a.kt)("inlineCode",{parentName:"td"},"object"),". Here the function implementer should be responsible for returning the output attribute on the defined return type for proper functionality.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"operation of the function")),(0,a.kt)("td",{parentName:"tr",align:null},"Here, the execution logic of the function is added. This logic should be written in the language specified under the ",(0,a.kt)("inlineCode",{parentName:"td"},"language name"),", and it should return the output in the data type specified via the ",(0,a.kt)("inlineCode",{parentName:"td"},"return type")," parameter.")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Examples")),(0,a.kt)("p",null,"This query performs concatenation using JavaScript, and returns the output as a string."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"define function concatFn[javascript] return string {\n    var str1 = data[0];\n    var str2 = data[1];\n    var str3 = data[2];\n    var responce = str1 + str2 + str3;\n    return responce;\n};\n\nCREATE STREAM TempStream(deviceID long, roomNo int, temp double);\n\ninsert into DeviceTempStream\nselect concatFn(roomNo,'-',deviceID) as id, temp\nfrom TempStream;\n")))}m.isMDXComponent=!0}}]);