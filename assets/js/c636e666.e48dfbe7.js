"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[36932],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return u}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},m=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},g={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),p=c(t),u=a,d=p["".concat(l,".").concat(u)]||p[u]||g[u]||i;return t?r.createElement(d,s(s({ref:n},m),{},{components:t})):r.createElement(d,s({ref:n},m))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,s=new Array(i);s[0]=p;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var c=2;c<i;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},60862:function(e,n,t){t.r(n),t.d(n,{assets:function(){return m},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return g}});var r=t(83117),a=t(80102),i=(t(67294),t(3905)),s=["components"],o={title:"Service Commands"},l="Service (gdnsl service)",c={unversionedId:"cli/service-cli",id:"cli/service-cli",title:"Service Commands",description:"Service command group.",source:"@site/docs/cli/service-cli.md",sourceDirName:"cli",slug:"/cli/service-cli",permalink:"/docs/cli/service-cli",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/cli/service-cli.md",tags:[],version:"current",frontMatter:{title:"Service Commands"},sidebar:"tutorialSidebar",previous:{title:"Search View Commands",permalink:"/docs/cli/search-views-cli"},next:{title:"Stream Worker Commands",permalink:"/docs/cli/stream-workers-cli"}},m={},g=[{value:"gdnsl service create",id:"gdnsl-service-create",level:2},{value:"gdnsl service list",id:"gdnsl-service-list",level:2},{value:"gdnsl service describe",id:"gdnsl-service-describe",level:2},{value:"gdnsl service update",id:"gdnsl-service-update",level:2},{value:"gdnsl service delete",id:"gdnsl-service-delete",level:2}],p={toc:g};function u(e){var n=e.components,t=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"service-gdnsl-service"},"Service (gdnsl service)"),(0,i.kt)("p",null,"Service command group."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"gdnsl service [flags]\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Options:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"  -h, --help                Help for service.\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Options inherited:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"      --config string       gdnsl config file (default is ./gdnsl.yaml)\n      --log-http            Log http traffic.\n")),(0,i.kt)("h2",{id:"gdnsl-service-create"},"gdnsl service create"),(0,i.kt)("p",null,"Create a service."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"gdnsl service create NAME --image IMAGE [flags]\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Examples:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"\n  # Create a service 'mysvc' using image at dev.local/ns/image:latest\n  gdnsl service create mysvc --image dev.local/ns/image:latest\n\n  # Create a service with multiple environment variables\n  gdnsl service create mysvc --env KEY1=VALUE1 --env KEY2=VALUE2 --image dev.local/ns/image:latest\n\n  # Create or replace a service 's1' with image dev.local/ns/image:v2 using --force flag\n  # if service 's1' doesn't exist, it's just a normal create operation\n  gdnsl service create --force s1 --image dev.local/ns/image:v2\n\n  # Create or replace environment variables of service 's1' using --force flag\n  gdnsl service create --force s1 --env KEY1=NEW_VALUE1 --env NEW_KEY2=NEW_VALUE2 --image dev.local/ns/image:v1\n\n  # Create service 'mysvc' with port 80\n  gdnsl service create mysvc --port 80 --image dev.local/ns/image:latest\n\n  # Create or replace default resources of a service 's1' using --force flag\n  # (earlier configured resource requests and limits will be replaced with default)\n  # (earlier configured environment variables will be cleared too if any)\n  gdnsl service create --force s1 --image dev.local/ns/image:v1\n\n  # Create a service with annotation\n  gdnsl service create s1 --image dev.local/ns/image:v3 --annotation sidecar.istio.io/inject=false\n\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Options:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'  -r, --regions                  List of region names or keywords (LOCAL or ALL). Overrides the region setting in gdnsl.yml config file.\n      --annotation stringArray   Service annotation to set. name=value; you may provide this flag any number of times to set multiple annotations.\n                                 To unset, specify the annotation name followed by a "-" (e.g., name-).\n      --async                    Create service and don\'t wait for it to become ready.\n      --concurrency-limit int    Hard Limit of concurrent requests to be processed by a single replica.\n      --concurrency-target int   Recommendation for when to scale up based on the concurrent number of incoming request. Defaults to --concurrency-limit when given.\n  -e, --env stringArray          Environment variable to set. NAME=value; you may provide this flag any number of times to set multiple environment variables. \n                                 To unset, specify the environment variable name followed by a "-" (e.g., NAME-).\n      --env-from stringArray     Add environment variables from a ConfigMap (prefix cm: or config-map:) or a Secret (prefix secret:). \n                                 Example: --env-from cm:myconfigmap or --env-from secret:mysecret. You can use this flag multiple times. To unset a ConfigMap/Secret reference, append "-" to the name, e.g. --env-from cm:myconfigmap-.\n\n      --force                    Create service forcefully, replaces existing service if any.\n  -h, --help                     Help to create a service.\n      --image string             Image to run.\n  -l, --label stringArray        Service label to set. name=value; you may provide this flag any number of times to set multiple labels. \n                                 To unset, specify the label name followed by a "-" (e.g., name-).\n      --limits-cpu string        The limits on the requested CPU (e.g., 1000m).\n      --limits-memory string     The limits on the requested memory (e.g., 1024Mi).\n      --lock-to-digest           keep the running image for the service constant when not explicitly specifying the image.\n                                 (--no-lock-to-digest pulls the image tag afresh with each new revision) (default true)\n      --max-scale int            Maximal number of replicas.\n      --min-scale int            Minimal number of replicas.\n      --mount stringArray        Mount a ConfigMap (prefix cm: or config-map:), a Secret (prefix secret: or sc:), or an existing Volume (without any prefix) on the specified directory. Example: --mount /mydir=cm:myconfigmap, --mount /mydir=secret:mysecret, or --mount /mydir=myvolume. When a configmap or a secret is specified, a corresponding volume is automatically generated. You can use this flag multiple times. For unmounting a directory, append "-", e.g. --mount /mydir-, which also removes any auto-generated volume.\n\n      --no-lock-to-digest        Do not keep the running image for the service constant when not explicitly specifying the image. \n                                 (--no-lock-to-digest pulls the image tag afresh with each new revision)\n  -p, --port int32               The port where application listens on.\n      --requests-cpu string      The requested CPU (e.g., 250m).\n      --requests-memory string   The requested memory (e.g., 64Mi).\n      --revision-name string     The revision name to set. Must start with the service name and a dash as a prefix. Empty revision name will result in the server generating a name for the revision. Accepts golang templates, allowing {{.Service}} for the service name, {{.Generation}} for the generation, and {{.Random [n]}} for n random consonants. (default "{{.Service}}-{{.Random 5}}-{{.Generation}}")\n\n      --service-account string   Service account name to set. Empty service account name will result to clear the service account.\n      --volume stringArray       Add a volume from a ConfigMap (prefix cm: or config-map:) or a Secret (prefix secret: or sc:). \n                                 Example: --volume myvolume=cm:myconfigmap or --volume myvolume=secret:mysecret. You can use this flag multiple times. To unset a ConfigMap/Secret reference, append "-" to the name, e.g. --volume myvolume-.\n      --wait-timeout int         Seconds to wait before giving up on waiting for service to be ready. (default 600)\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Options inherited:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"      --config string           gdnsl config file (default is ./gdnsl.yaml)\n      --log-http                Log http traffic.\n")),(0,i.kt)("h2",{id:"gdnsl-service-list"},"gdnsl service list"),(0,i.kt)("p",null,"List available services."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"gdnsl service list [name] [flags]\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Examples:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"  # List all services\n  gdnsl service list\n\n  # List all services in JSON output format\n  gdnsl service list -o json\n\n  # List service 'web'\n  gdnsl service list web\n\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Options:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"  -r, --regions              List of region names or keywords (LOCAL or ALL). Overrides the region setting in gdnsl.yml config file.\n  -h, --help                 Help for list.\n      --no-headers           When using the default output format, don't print headers (default: print headers).\n  -o, --output string        Output format. One of: json|yaml|.\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Options inherited:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"      --config string        gdnsl config file (default is ./gdnsl.yaml)\n      --log-http             Log http traffic.\n")),(0,i.kt)("h2",{id:"gdnsl-service-describe"},"gdnsl service describe"),(0,i.kt)("p",null,"Show details for a given service."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"gdnsl service describe NAME [flags]\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Options:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"  -r, --regions                       List of region names or keywords (LOCAL or ALL). Overrides the region setting in gdnsl.yml config file.\n      --allow-missing-template-keys   If true, ignore any errors in templates when a field or map key is missing in the template.\n                                      Only applies to golang and jsonpath output formats. (default true)\n  -h, --help                          Help to describe a serice.\n  -o, --output string                 Output format. One of: json|yaml\n  -v, --verbose                       More output.\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Options inherited:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"      --config string                 gdnsl config file (default is ./gdnsl.yaml)\n      --log-http                      Log http traffic.\n")),(0,i.kt)("h2",{id:"gdnsl-service-update"},"gdnsl service update"),(0,i.kt)("p",null,"Update a service."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"gdnsl service update NAME [flags]\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Examples:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"\n  # Updates a service 'svc' with new environment variables\n  gdnsl service update svc --env KEY1=VALUE1 --env KEY2=VALUE2\n\n  # Update a service 'svc' with new port\n  gdnsl service update svc --port 80\n\n  # Updates a service 'svc' with new requests and limits parameters\n  gdnsl service update svc --requests-cpu 500m --limits-memory 1024Mi\n\n  # Assign tag 'latest' and 'stable' to revisions 'echo-v2' and 'echo-v1' respectively\n  gdnsl service update svc --tag echo-v2=latest --tag echo-v1=stable\n  OR\n  gdnsl service update svc --tag echo-v2=latest,echo-v1=stable\n\n  # Update tag from 'testing' to 'staging' for latest ready revision of service\n  gdnsl service update svc --untag testing --tag @latest=staging\n\n  # Add tag 'test' to echo-v3 revision with 10% traffic and rest to latest ready revision of service\n  gdnsl service update svc --tag echo-v3=test --traffic test=10,@latest=90\n\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Options:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'  -r, --regions                  List of region names or keywords (LOCAL or ALL). Overrides the region setting in gdnsl.yml config file.\n      --annotation stringArray   Service annotation to set. name=value; you may provide this flag any number of times to set multiple annotations. \n                                 To unset, specify the annotation name followed by a "-" (e.g., name-).\n      --async                    Update service and don\'t wait for it to become ready.\n      --concurrency-limit int    Hard Limit of concurrent requests to be processed by a single replica.\n      --concurrency-target int   Recommendation for when to scale up based on the concurrent number of incoming request. Defaults to --concurrency-limit when given.\n  -e, --env stringArray          Environment variable to set. NAME=value; you may provide this flag any number of times to set multiple environment variables. \n                                 To unset, specify the environment variable name followed by a "-" (e.g., NAME-).\n      --env-from stringArray     Add environment variables from a ConfigMap (prefix cm: or config-map:) or a Secret (prefix secret:). \n                                 Example: --env-from cm:myconfigmap or --env-from secret:mysecret. You can use this flag multiple times. \n                                 To unset a ConfigMap/Secret reference, append "-" to the name, e.g. --env-from cm:myconfigmap-.\n\n  -h, --help                     Help to update a service.\n      --image string             Image to run.\n  -l, --label stringArray        Service label to set. name=value; you may provide this flag any number of times to set multiple labels. \n                                 To unset, specify the label name followed by a "-" (e.g., name-).\n      --limits-cpu string        The limits on the requested CPU (e.g., 1000m).\n      --limits-memory string     The limits on the requested memory (e.g., 1024Mi).\n      --lock-to-digest           keep the running image for the service constant when not explicitly specifying the image. \n                                 (--no-lock-to-digest pulls the image tag afresh with each new revision) (default true)\n      --max-scale int            Maximal number of replicas.\n      --min-scale int            Minimal number of replicas.\n      --mount stringArray        Mount a ConfigMap (prefix cm: or config-map:), a Secret (prefix secret: or sc:), or an existing Volume (without any prefix) on the specified directory. Example: --mount /mydir=cm:myconfigmap, --mount /mydir=secret:mysecret, or --mount /mydir=myvolume. When a configmap or a secret is specified, a corresponding volume is automatically generated. You can use this flag multiple times. For unmounting a directory, append "-", e.g. --mount /mydir-, which also removes any auto-generated volume.\n\n      --no-lock-to-digest        Do not keep the running image for the service constant when not explicitly specifying the image. \n                                 (--no-lock-to-digest pulls the image tag afresh with each new revision)\n  -p, --port int32               The port where application listens on.\n      --requests-cpu string      The requested CPU (e.g., 250m).\n      --requests-memory string   The requested memory (e.g., 64Mi).\n      --revision-name string     The revision name to set. Must start with the service name and a dash as a prefix. Empty revision name will result in the server generating a name for the revision. Accepts golang templates, allowing {{.Service}} for the service name, {{.Generation}} for the generation, and {{.Random [n]}} for n random consonants. (default "{{.Service}}-{{.Random 5}}-{{.Generation}}")\n\n      --service-account string   Service account name to set. Empty service account name will result to clear the service account.\n      --tag strings              Set tag (format: --tag revisionRef=tagName) where revisionRef can be a revision or \'@latest\' string representing \n                                 latest ready revision. This flag can be specified multiple times.\n      --traffic strings          Set traffic distribution (format: --traffic revisionRef=percent) where revisionRef can be a revision or a tag or \'@latest\' string representing latest ready revision. This flag can be given multiple times with percent summing up to 100%.\n      --untag strings            Untag revision (format: --untag tagName). This flag can be specified multiple times.\n      --volume stringArray       Add a volume from a ConfigMap (prefix cm: or config-map:) or a Secret (prefix secret: or sc:). Example: --volume myvolume=cm:myconfigmap or --volume myvolume=secret:mysecret. You can use this flag multiple times. To unset a ConfigMap/Secret reference, append "-" to the name, e.g. --volume myvolume-.\n\n      --wait-timeout int         Seconds to wait before giving up on waiting for service to be ready. (default 600)\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Options inherited:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"      --config string            gdnsl config file (default is ./gdnsl.yaml)\n      --log-http                 Log http traffic.\n")),(0,i.kt)("h2",{id:"gdnsl-service-delete"},"gdnsl service delete"),(0,i.kt)("p",null,"Delete a service."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"gdnsl service delete NAME [flags]\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Examples:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"  # Delete a service 'svc1' in tenant namespace\n  gdnsl service delete svc1\n\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Options:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"  -r, --regions             List of region names or keywords (LOCAL or ALL). Overrides the region setting in gdnsl.yml config file.\n  -h, --help                Help to delete a service.\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Options inherited:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"      --config string       gdnsl config file (default is ./gdnsl.yaml)\n      --log-http            log http traffic\n")))}u.isMDXComponent=!0}}]);