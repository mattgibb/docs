"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[13229],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),g=u(n),d=o,m=g["".concat(s,".").concat(d)]||g[d]||p[d]||l;return n?r.createElement(m,a(a({ref:t},c),{},{components:n})):r.createElement(m,a({ref:t},c))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,a=new Array(l);a[0]=g;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var u=2;u<l;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},89392:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return p}});var r=n(83117),o=n(80102),l=(n(67294),n(3905)),a=["components"],i={title:"Route Commands"},s="Route (gdnsl route)",u={unversionedId:"cli/route-cli",id:"cli/route-cli",title:"Route Commands",description:"Route command group.",source:"@site/docs/cli/route-cli.md",sourceDirName:"cli",slug:"/cli/route-cli",permalink:"/docs/cli/route-cli",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/cli/route-cli.md",tags:[],version:"current",frontMatter:{title:"Route Commands"},sidebar:"tutorialSidebar",previous:{title:"Revision Commands",permalink:"/docs/cli/revision-cli"},next:{title:"Search Commands",permalink:"/docs/cli/search-cli"}},c={},p=[{value:"gdnsl route list",id:"gdnsl-route-list",level:2},{value:"gdnsl route describe",id:"gdnsl-route-describe",level:2}],g={toc:p};function d(e){var t=e.components,n=(0,o.Z)(e,a);return(0,l.kt)("wrapper",(0,r.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"route-gdnsl-route"},"Route (gdnsl route)"),(0,l.kt)("p",null,"Route command group."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"gdnsl route [flags]\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Options:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"  -r, --regions             List of region names or keywords (LOCAL or ALL). Overrides the region setting in gdnsl.yml config file.\n  -h, --help                Help for route.\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Options inherited:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"      --config string       gdnsl config file (default is ./gdnsl.yaml)\n      --log-http            Log http traffic.\n")),(0,l.kt)("h2",{id:"gdnsl-route-list"},"gdnsl route list"),(0,l.kt)("p",null,"List available routes."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"gdnsl route list NAME [flags]\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"  # List all routes\n  gdnsl route list\n\n  # List route 'web' in namespace 'dev'\n  gdnsl route list web -n dev\n\n  # List all routes in yaml format\n  gdnsl route list -o yaml\n\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Options:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"  -r, --regions               List of region names or keywords (LOCAL or ALL). Overrides the region setting in gdnsl.yml config file.\n  -h, --help                  Help to list revisions.\n      --no-headers            When using the default output format, don't print headers (default: print headers).\n  -o, --output string         Output format. One of: json|yaml\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Options inherited:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"      --config string         gdnsl config file (default is ./gdnsl.yaml)\n      --log-http              Log http traffic.\n")),(0,l.kt)("h2",{id:"gdnsl-route-describe"},"gdnsl route describe"),(0,l.kt)("p",null,"Describe available route."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"gdnsl route describe NAME [flags]\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Options:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"  -r, --regions              List of region names or keywords (LOCAL or ALL). Overrides the region setting in gdnsl.yml config file.\n  -h, --help                 help to describe a route.\n  -o, --output string        Output format. One of: json|yaml\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Options inherited:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"      --config string        gdnsl config file (default is ./gdnsl.yaml)\n      --log-http             Log http traffic.\n")))}d.isMDXComponent=!0}}]);