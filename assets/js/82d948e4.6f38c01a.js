"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[46622],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return d}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},p=Object.keys(e);for(r=0;r<p.length;r++)n=p[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(r=0;r<p.length;r++)n=p[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),s=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=s(e.components);return r.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,p=e.originalType,o=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),c=s(n),d=a,f=c["".concat(o,".").concat(d)]||c[d]||u[d]||p;return n?r.createElement(f,l(l({ref:t},m),{},{components:n})):r.createElement(f,l({ref:t},m))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var p=n.length,l=new Array(p);l[0]=c;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var s=2;s<p;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},64856:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return o},default:function(){return d},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return u}});var r=n(83117),a=n(80102),p=(n(67294),n(3905)),l=["components"],i={title:"text (Sink Mapper)"},o=void 0,s={unversionedId:"cep/reference/functions/sinkmapper/text",id:"cep/reference/functions/sinkmapper/text",title:"text (Sink Mapper)",description:"This extension is a Event to Text output mapper. Transports that publish",source:"@site/docs/cep/reference/functions/sinkmapper/text.md",sourceDirName:"cep/reference/functions/sinkmapper",slug:"/cep/reference/functions/sinkmapper/text",permalink:"/docs/cep/reference/functions/sinkmapper/text",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/cep/reference/functions/sinkmapper/text.md",tags:[],version:"current",frontMatter:{title:"text (Sink Mapper)"},sidebar:"tutorialSidebar",previous:{title:"protobuf (Sink Mapper)",permalink:"/docs/cep/reference/functions/sinkmapper/protobuf"},next:{title:"xml (Sink Mapper)",permalink:"/docs/cep/reference/functions/sinkmapper/xml"}},m={},u=[{value:"Query Parameters",id:"query-parameters",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Example 3",id:"example-3",level:2},{value:"Example 4",id:"example-4",level:2},{value:"Example 5",id:"example-5",level:2}],c={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,l);return(0,p.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,p.kt)("p",null,"This extension is a Event to Text output mapper. Transports that publish\ntext messages can utilize this extension to convert the Stream App events to\ntext messages. Users can use a pre-defined text format where event\nconversion is carried out without any additional configurations, or use\ncustom placeholder(using ",(0,p.kt)("inlineCode",{parentName:"p"},"{{")," and ",(0,p.kt)("inlineCode",{parentName:"p"},"}}"),") to map custom text messages.\nAgain, you can also enable mustache based custom mapping. In mustache\nbased custom mapping you can use custom placeholder (using ",(0,p.kt)("inlineCode",{parentName:"p"},"{{")," and ",(0,p.kt)("inlineCode",{parentName:"p"},"}}"),"\nor ",(0,p.kt)("inlineCode",{parentName:"p"},"{{{")," and ",(0,p.kt)("inlineCode",{parentName:"p"},"}}}"),") to map custom text. In mustache based custom\nmapping, all variables are HTML escaped by default. For example: ",(0,p.kt)("inlineCode",{parentName:"p"},"&")," is\nreplaced with ",(0,p.kt)("inlineCode",{parentName:"p"},"&amp;")," ",(0,p.kt)("inlineCode",{parentName:"p"},'"')," is replaced with ",(0,p.kt)("inlineCode",{parentName:"p"},"&quot;")," ",(0,p.kt)("inlineCode",{parentName:"p"},"=")," is replaced with\n",(0,p.kt)("inlineCode",{parentName:"p"},"&#61;")," If you want to return unescaped HTML, use the triple mustache\n",(0,p.kt)("inlineCode",{parentName:"p"},"{{{")," instead of double ",(0,p.kt)("inlineCode",{parentName:"p"},"{{"),"."),(0,p.kt)("p",null,"Syntax"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},'CREATE SINK <NAME> WITH (type="text", event.grouping.enabled="<BOOL>", delimiter="<STRING>", new.line.character="<STRING>", mustache.enabled="<BOOL>")\n')),(0,p.kt)("h2",{id:"query-parameters"},"Query Parameters"),(0,p.kt)("table",null,(0,p.kt)("thead",{parentName:"table"},(0,p.kt)("tr",{parentName:"thead"},(0,p.kt)("th",{parentName:"tr",align:null},"Name"),(0,p.kt)("th",{parentName:"tr",align:null},"Description"),(0,p.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,p.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,p.kt)("th",{parentName:"tr",align:null},"Optional"),(0,p.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,p.kt)("tbody",{parentName:"table"},(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:null},"event.grouping.enabled"),(0,p.kt)("td",{parentName:"tr",align:null},"If this parameter is set to ",(0,p.kt)("inlineCode",{parentName:"td"},"true"),", events are grouped via a delimiter when multiple events are received. It is required to specify a value for the ",(0,p.kt)("inlineCode",{parentName:"td"},"delimiter")," parameter when the value for this parameter is ",(0,p.kt)("inlineCode",{parentName:"td"},"true"),"."),(0,p.kt)("td",{parentName:"tr",align:null},"false"),(0,p.kt)("td",{parentName:"tr",align:null},"BOOL"),(0,p.kt)("td",{parentName:"tr",align:null},"Yes"),(0,p.kt)("td",{parentName:"tr",align:null},"No")),(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:null},"delimiter"),(0,p.kt)("td",{parentName:"tr",align:null},"This parameter specifies how events are separated when a grouped event is received. This must be a whole line and not a single character."),(0,p.kt)("td",{parentName:"tr",align:null},"~","~","~","~","~","~","~","~","~","~"),(0,p.kt)("td",{parentName:"tr",align:null},"STRING"),(0,p.kt)("td",{parentName:"tr",align:null},"Yes"),(0,p.kt)("td",{parentName:"tr",align:null},"No")),(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:null},"new.line.character"),(0,p.kt)("td",{parentName:"tr",align:null},"This attribute indicates the new line character of the event that is expected to be received. This is used mostly when communication between 2 types of operating systems is expected. For example, Linux uses ",(0,p.kt)("inlineCode",{parentName:"td"},"\\n")," whereas Windows uses ",(0,p.kt)("inlineCode",{parentName:"td"},"\\r\\n")," as the end of line character."),(0,p.kt)("td",{parentName:"tr",align:null},"\\","n"),(0,p.kt)("td",{parentName:"tr",align:null},"STRING"),(0,p.kt)("td",{parentName:"tr",align:null},"Yes"),(0,p.kt)("td",{parentName:"tr",align:null},"No")),(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:null},"mustache.enabled"),(0,p.kt)("td",{parentName:"tr",align:null},"If this parameter is set to ",(0,p.kt)("inlineCode",{parentName:"td"},"true"),", then mustache mapping gets enabled forcustom text mapping."),(0,p.kt)("td",{parentName:"tr",align:null},"false"),(0,p.kt)("td",{parentName:"tr",align:null},"BOOL"),(0,p.kt)("td",{parentName:"tr",align:null},"Yes"),(0,p.kt)("td",{parentName:"tr",align:null},"No")))),(0,p.kt)("h2",{id:"example-1"},"Example 1"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"CREATE SINK FooStream WITH (type='inMemory', topic='stock', map.type='text') (symbol string, price float, volume long);\n")),(0,p.kt)("p",null,'This query performs a default text input mapping. The expected output is\nas follows: symbol:"gdn", price:55.6, volume:100'),(0,p.kt)("h2",{id:"example-2"},"Example 2"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"CREATE SINK FooStream WITH (type='inMemory', topic='stock', map.type='text', map.event.grouping.enabled='true') (symbol string, price float, volume long);\n")),(0,p.kt)("p",null,'This query performs a default text input mapping with event grouping.\nThe expected output is as follows: symbol:"gdn", price:55.6,\nvolume:100 ',(0,p.kt)("del",{parentName:"p"}),(0,p.kt)("del",{parentName:"p"}),'~~ symbol:"gdn", price:55.6, volume:100'),(0,p.kt)("h2",{id:"example-3"},"Example 3"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"CREATE SINK FooStream WITH (type='inMemory', topic='stock', map.type='text',  map.payload=\"SensorID : {{symbol}}/{{volume}}, SensorPrice : Rs{{price}}/=, Value : {{volume}}ml\") (symbol string, price float, volume long);\n")),(0,p.kt)("p",null,"This query performs a custom text mapping. The expected output is as\nfollows: SensorID : gdn/100, SensorPrice : Rs1000/=, Value : 100ml for\nthe following stream processor event. {gdn,1000,100}"),(0,p.kt)("h2",{id:"example-4"},"Example 4"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"CREATE SINK FooStream WITH (type='inMemory', topic='stock', map.type='text', map.event.grouping.enabled='true', map.payload=\"Stock price of {{symbol}} is {{price}}\") (symbol string, price float, volume long);\n")),(0,p.kt)("p",null,"This query performs a custom text mapping with event grouping. The\nexpected output is as follows: Stock price of gdn is 55.6\n","~",(0,p.kt)("del",{parentName:"p"}),(0,p.kt)("del",{parentName:"p"}),"~ Stock price of gdn is 55.6 ",(0,p.kt)("del",{parentName:"p"}),(0,p.kt)("del",{parentName:"p"}),"~~\\\nStock price of gdn is 55.6 for the following stream processor event.\n{gdn,55.6,10}"),(0,p.kt)("h2",{id:"example-5"},"Example 5"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"CREATE SINK FooStream WITH (type='inMemory', topic='stock', map.type='text', map.mustache.enabled='true',  map.payload=\"SensorID : {{{symbol}}}/{{{volume}}}, SensorPrice : Rs{{{price}}}/=, Value : {{{volume}}}ml\") (symbol string, price float, volume long);\n")),(0,p.kt)("p",null,"This query performs a custom text mapping to return unescaped HTML. The\nexpected output is as follows: SensorID : a&b/100, SensorPrice :\nRs1000/=, Value : 100ml for the following stream processor event. {a&b,1000,100}"))}d.isMDXComponent=!0}}]);