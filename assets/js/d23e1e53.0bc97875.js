"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[62938],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return m}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,l=u(e,["components","mdxType","originalType","parentName"]),d=c(n),m=o,f=d["".concat(s,".").concat(m)]||d[m]||p[m]||a;return n?r.createElement(f,i(i({ref:t},l),{},{components:n})):r.createElement(f,i({ref:t},l))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u.mdxType="string"==typeof e?e:o,i[1]=u;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},66378:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return u},metadata:function(){return c},toc:function(){return p}});var r=n(83117),o=n(80102),a=(n(67294),n(3905)),i=["components"],u={title:"Projection Queries"},s=void 0,c={unversionedId:"queryworkers/projection-queries",id:"queryworkers/projection-queries",title:"Projection Queries",description:"You can return a projection of the documents in OLD or NEW instead of returning the entire documents. This can be used to reduce the amount of data returned by queries.",source:"@site/docs/queryworkers/projection-queries.md",sourceDirName:"queryworkers",slug:"/queryworkers/projection-queries",permalink:"/docs/queryworkers/projection-queries",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/queryworkers/projection-queries.md",tags:[],version:"current",frontMatter:{title:"Projection Queries"},sidebar:"tutorialSidebar",previous:{title:"Data Modification Queries",permalink:"/docs/queryworkers/data-modification-queries"},next:{title:"Query Errors",permalink:"/docs/queryworkers/query-errors"}},l={},p=[{value:"Using OLD and NEW in the same query",id:"using-old-and-new-in-the-same-query",level:2},{value:"Calculations with OLD or NEW",id:"calculations-with-old-or-new",level:2}],d={toc:p};function m(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"You can return a projection of the documents in ",(0,a.kt)("inlineCode",{parentName:"p"},"OLD")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"NEW")," instead of returning the entire documents. This can be used to reduce the amount of data returned by queries."),(0,a.kt)("p",null,"For example, the following query will return only the keys of the inserted documents:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"FOR i IN 1..100\n    INSERT { value: i } IN test \n    RETURN NEW._key\n")),(0,a.kt)("h2",{id:"using-old-and-new-in-the-same-query"},"Using OLD and NEW in the same query"),(0,a.kt)("p",null,"For ",(0,a.kt)("inlineCode",{parentName:"p"},"UPDATE"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"REPLACE")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"UPSERT")," statements, both ",(0,a.kt)("inlineCode",{parentName:"p"},"OLD")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"NEW")," can be used to return the previous revision of a document together with the updated revision:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'FOR u IN users\n    FILTER u.status == "not active"\n    UPDATE u WITH { status: "inactive" } IN users \n    RETURN { old: OLD, new: NEW }\n')),(0,a.kt)("h2",{id:"calculations-with-old-or-new"},"Calculations with OLD or NEW"),(0,a.kt)("p",null,"It is also possible to run additional calculations with ",(0,a.kt)("inlineCode",{parentName:"p"},"LET")," statements between the data-modification part and the final ",(0,a.kt)("inlineCode",{parentName:"p"},"RETURN")," of a C8QL query. "),(0,a.kt)("p",null,"For example, the following query performs an upsert operation and returns whether an existing document was updated, or a new document was inserted. It does so by checking the ",(0,a.kt)("inlineCode",{parentName:"p"},"OLD")," variable after the ",(0,a.kt)("inlineCode",{parentName:"p"},"UPSERT")," and using a ",(0,a.kt)("inlineCode",{parentName:"p"},"LET")," statement to store a temporary string for the operation type:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'UPSERT { name: "test" }\n    INSERT { name: "test" }\n    UPDATE { } IN users\nLET opType = IS_NULL(OLD) ? "insert" : "update"\nRETURN { _key: NEW._key, type: opType }\n')))}m.isMDXComponent=!0}}]);