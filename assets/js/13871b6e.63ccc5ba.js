"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[32685],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return f}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),s=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),m=s(n),f=o,d=m["".concat(i,".").concat(f)]||m[f]||u[f]||a;return n?r.createElement(d,l(l({ref:t},c),{},{components:n})):r.createElement(d,l({ref:t},c))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=m;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p.mdxType="string"==typeof e?e:o,l[1]=p;for(var s=2;s<a;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},39399:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return i},default:function(){return f},frontMatter:function(){return p},metadata:function(){return s},toc:function(){return u}});var r=n(83117),o=n(80102),a=(n(67294),n(3905)),l=["components"],p={title:"json (Source Mapper)"},i=void 0,s={unversionedId:"cep/reference/functions/sourcemapper/json",id:"cep/reference/functions/sourcemapper/json",title:"json (Source Mapper)",description:"This extension is a JSON-to-Event input mapper. Transports that accept",source:"@site/docs/cep/reference/functions/sourcemapper/json.md",sourceDirName:"cep/reference/functions/sourcemapper",slug:"/cep/reference/functions/sourcemapper/json",permalink:"/docs/cep/reference/functions/sourcemapper/json",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/cep/reference/functions/sourcemapper/json.md",tags:[],version:"current",frontMatter:{title:"json (Source Mapper)"},sidebar:"tutorialSidebar",previous:{title:"csv (Source Mapper)",permalink:"/docs/cep/reference/functions/sourcemapper/csv"},next:{title:"keyvalue (Source Mapper)",permalink:"/docs/cep/reference/functions/sourcemapper/keyvalue"}},c={},u=[{value:"Query Parameters",id:"query-parameters",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Example 3",id:"example-3",level:2},{value:"Example 4",id:"example-4",level:2}],m={toc:u};function f(e){var t=e.components,n=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,'This extension is a JSON-to-Event input mapper. Transports that accept\nJSON messages can utilize this extension to convert an incoming JSON\nmessage into a Stream App event. Users can either send a pre-defined JSON\nformat, where event conversion happens without any configurations, or\nuse the JSON path to map from a custom JSON message. In default mapping,\nthe JSON string of the event can be enclosed by the element "event",\nthough optional.'),(0,a.kt)("p",null,"Syntax"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'CREATE SOURCE <NAME> WITH (map.type="json", enclosing.element="<STRING>", fail.on.missing.attribute="<BOOL>")\n')),(0,a.kt)("h2",{id:"query-parameters"},"Query Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,a.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,a.kt)("th",{parentName:"tr",align:null},"Optional"),(0,a.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"enclosing.element"),(0,a.kt)("td",{parentName:"tr",align:null},"This is used to specify the enclosing element when sending multiple events in the same JSON message. Mapper treats the child elements of a given enclosing element as events and executes the JSON path expressions on these child elements. If the enclosing.element is not provided then the multiple-event scenario is disregarded and the JSON path is evaluated based on the root element."),(0,a.kt)("td",{parentName:"tr",align:null},"\\$"),(0,a.kt)("td",{parentName:"tr",align:null},"STRING"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes"),(0,a.kt)("td",{parentName:"tr",align:null},"No")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"fail.on.missing.attribute"),(0,a.kt)("td",{parentName:"tr",align:null},"This parameter allows users to handle unknown attributes.The value of this can either be true or false. By default it is true.  If a JSON execution fails or returns null, mapper drops that message. However, setting this property to false prompts mapper to send an event with a null value to Stream App, where users can handle it as required, ie., assign a default value.)"),(0,a.kt)("td",{parentName:"tr",align:null},"true"),(0,a.kt)("td",{parentName:"tr",align:null},"BOOL"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes"),(0,a.kt)("td",{parentName:"tr",align:null},"No")))),(0,a.kt)("h2",{id:"example-1"},"Example 1"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"CREATE SOURCE FooStream WITH (type='inMemory', topic='stock', map.type='json') (symbol string, price float, volume long);\n")),(0,a.kt)("p",null,'This configuration performs a default JSON input mapping.  For a single\nevent, the input is required to be in one of the following formats: {\n"event":{         "symbol":"gdn",         "price":55.6,\n"volume":100     } } or {     "symbol":"gdn",\n"price":55.6,     "volume":100 }'),(0,a.kt)("h2",{id:"example-2"},"Example 2"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"CREATE SOURCE FooStream WITH (type='inMemory', topic='stock', map.type='json') (symbol string, price float, volume long);\n")),(0,a.kt)("p",null,"This configuration performs a default JSON input mapping. For multiple\nevents, the input is required to be in one of the following formats: ",'[\n{\\"event\\":{\\"symbol\\":\\"gdn\\",\\"price\\":55.6,\\"volume\\":100}},\n{\\"event\\":{\\"symbol\\":\\"gdn\\",\\"price\\":56.6,\\"volume\\":99}},\n{\\"event\\":{\\"symbol\\":\\"gdn\\",\\"price\\":57.6,\\"volume\\":80}} ]'," or ",'[\n{\\"symbol\\":\\"gdn\\",\\"price\\":55.6,\\"volume\\":100},\n{\\"symbol\\":\\"gdn\\",\\"price\\":56.6,\\"volume\\":99},\n{\\"symbol\\":\\"gdn\\",\\"price\\":57.6,\\"volume\\":80} ]'),(0,a.kt)("h2",{id:"example-3"},"Example 3"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"CREATE SOURCE FooStream WITH (type='inMemory', topic='stock', map.type='json', map.enclosing.element=\"$.portfolio\", map.attributes=\"symbol = 'company.symbol', price = 'price', volume = 'volume'\")\n")),(0,a.kt)("p",null,'This configuration performs a custom JSON mapping. For a single event,\nthe expected input is similar to the one shown below: {  "portfolio":{\n"stock":{ "volume":100,         "company":{\n"symbol":"gdn"           },         "price":55.6\n}    } }'),(0,a.kt)("h2",{id:"example-4"},"Example 4"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"CREATE SOURCE FooStream WITH (type='inMemory', topic='stock', map.type='json', map.enclosing.element=\"$.portfolio\", map.attributes=\"symbol = 'stock.company.symbol', price = 'stock.price', volume = 'stock.volume'\") (symbol string, price float, volume long);\n")),(0,a.kt)("p",null,'The configuration performs a custom JSON mapping. For multiple events,\nexpected input looks as follows. .{"portfolio":    ','[\n{\\"stock\\":{\\"volume\\":100,\\"company\\":{\\"symbol\\":\\"gdn\\"},\\"price\\":56.6}},\n{\\"stock\\":{\\"volume\\":200,\\"company\\":{\\"symbol\\":\\"gdn\\"},\\"price\\":57.6}}\n]'," }"))}f.isMDXComponent=!0}}]);