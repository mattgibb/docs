"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[43080],{3905:function(t,e,a){a.d(e,{Zo:function(){return p},kt:function(){return k}});var l=a(67294);function n(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function r(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);e&&(l=l.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,l)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?r(Object(a),!0).forEach((function(e){n(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function o(t,e){if(null==t)return{};var a,l,n=function(t,e){if(null==t)return{};var a,l,n={},r=Object.keys(t);for(l=0;l<r.length;l++)a=r[l],e.indexOf(a)>=0||(n[a]=t[a]);return n}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(l=0;l<r.length;l++)a=r[l],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(n[a]=t[a])}return n}var s=l.createContext({}),c=function(t){var e=l.useContext(s),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},p=function(t){var e=c(t.components);return l.createElement(s.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return l.createElement(l.Fragment,{},e)}},d=l.forwardRef((function(t,e){var a=t.components,n=t.mdxType,r=t.originalType,s=t.parentName,p=o(t,["components","mdxType","originalType","parentName"]),d=c(a),k=n,m=d["".concat(s,".").concat(k)]||d[k]||u[k]||r;return a?l.createElement(m,i(i({ref:e},p),{},{components:a})):l.createElement(m,i({ref:e},p))}));function k(t,e){var a=arguments,n=e&&e.mdxType;if("string"==typeof t||n){var r=a.length,i=new Array(r);i[0]=d;var o={};for(var s in e)hasOwnProperty.call(e,s)&&(o[s]=e[s]);o.originalType=t,o.mdxType="string"==typeof t?t:n,i[1]=o;for(var c=2;c<r;c++)i[c]=a[c];return l.createElement.apply(null,i)}return l.createElement.apply(null,a)}d.displayName="MDXCreateElement"},31622:function(t,e,a){a.r(e),a.d(e,{assets:function(){return p},contentTitle:function(){return s},default:function(){return k},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return u}});var l=a(83117),n=a(80102),r=(a(67294),a(3905)),i=["components"],o={sidebar_position:2},s="Create Stream Application",c={unversionedId:"cep/tutorials/create-stream-app",id:"cep/tutorials/create-stream-app",title:"Create Stream Application",description:"Introduction",source:"@site/docs/cep/tutorials/create-stream-app.md",sourceDirName:"cep/tutorials",slug:"/cep/tutorials/create-stream-app",permalink:"/docs/cep/tutorials/create-stream-app",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/cep/tutorials/create-stream-app.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Using Rest API",permalink:"/docs/cep/tutorials/using_rest_api"},next:{title:"Consuming Data",permalink:"/docs/cep/tutorials/consuming-data"}},p={},u=[{value:"Introduction",id:"introduction",level:2},{value:"Creating a Stream Application",id:"creating-a-stream-application",level:2},{value:"Source",id:"source",level:2},{value:"C8Streams",id:"c8streams",level:3},{value:"C8DB",id:"c8db",level:3},{value:"Sink",id:"sink",level:2},{value:"C8Streams",id:"c8streams-1",level:3},{value:"Table",id:"table",level:2},{value:"C8DB",id:"c8db-1",level:3},{value:"Tutorials",id:"tutorials",level:2}],d={toc:u};function k(t){var e=t.components,a=(0,n.Z)(t,i);return(0,r.kt)("wrapper",(0,l.Z)({},d,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"create-stream-application"},"Create Stream Application"),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"Stream applications are declarative specs that define the processing logic to process the events sent to the stream processor. A stream app definition contains the following configurations:"),(0,r.kt)("table",null,(0,r.kt)("thead",null,(0,r.kt)("tr",{class:"header"},(0,r.kt)("th",null,"Configuration"),(0,r.kt)("th",null,"Description"))),(0,r.kt)("tbody",null,(0,r.kt)("tr",{class:"odd"},(0,r.kt)("td",null,"Stream"),(0,r.kt)("td",null,"A logical series of events ordered in time with a uniquely identifiable name, and set of defined attributes with specific data types defining its schema.")),(0,r.kt)("tr",{class:"even"},(0,r.kt)("td",null,"Source"),(0,r.kt)("td",null,"This consumes data from external sources (such as `TCP` , ` Kafka ` , ` HTTP ` , etc) in the form of events, then converts each event (that can be in `XML` , `             JSON` , ` binary` , etc. format) to a stream event, and passes that to a stream for processing.")),(0,r.kt)("tr",{class:"odd"},(0,r.kt)("td",null,"Sink"),(0,r.kt)("td",null,"This takes events arriving at a stream, maps them to a predefined data format (such as `  XML ` , `JSON,` `binary` , etc), and publishes them to external endpoints (such as ` E-mail ` , ` TCP ` , ` Kafka ` , `HTTP ` , etc).")),(0,r.kt)("tr",{class:"even"},(0,r.kt)("td",null,"Table"),(0,r.kt)("td",null,"A structured representation of data stored with a defined schema. Stored data can be backed by In-Memory, or external data stores such as RDBMS, MongoDB, etc. The tables can be accessed and manipulated at runtime.")),(0,r.kt)("tr",{class:"odd"},(0,r.kt)("td",null,"Executional Element"),(0,r.kt)("td",null,(0,r.kt)("p",null,"An executional element can be one of the following:"),(0,r.kt)("ul",null,(0,r.kt)("li",null,"Stateless query: Queries that only consider currently incoming events when generating an output. e.g., filters"),(0,r.kt)("li",null,"Stateful query: Queries that consider both currently incoming events as well as past events when generating an output. e.g., windows, sequences, patterns, etc."),(0,r.kt)("li",null,"Partitions: Collections of stream definitions and queries separated from each other within a Stream application for the purpose of processing events in parallel and in isolation")))))),(0,r.kt)("p",null,"Macrometa provide in-build source, sink and store explained in the later section of this document."),(0,r.kt)("h2",{id:"creating-a-stream-application"},"Creating a Stream Application"),(0,r.kt)("p",null,"To create a stream application follow the steps below:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Open the GUI. Click the ",(0,r.kt)("strong",{parentName:"p"},"Stream Apps")," tab.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Click ",(0,r.kt)("strong",{parentName:"p"},"New")," to define a new stream application.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Type a ",(0,r.kt)("strong",{parentName:"p"},"Name")," for the stream application. For example, ",(0,r.kt)("inlineCode",{parentName:"p"},"SweetProductionAnalysis"),".")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Type a ",(0,r.kt)("strong",{parentName:"p"},"Description"),".")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Add the following sample stream application."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE SOURCE SweetProductionStream WITH (type = 'database', collection='SweetProductionData', map.type='json') (name string, amount double);\n\nCREATE SINK ProductionAlertStream WITH (type= 'stream', stream='ProductionAlertStream', map.type='json') (name string, amount double);\n\nINSERT INTO ProductionAlertStream\nSELECT *\nFROM SweetProductionStream;\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Click ",(0,r.kt)("inlineCode",{parentName:"p"},"Save")," to save the stream app.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Select all the regions to deploy your application in.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Click on ",(0,r.kt)("inlineCode",{parentName:"p"},"Save"),"."))),(0,r.kt)("h2",{id:"source"},"Source"),(0,r.kt)("h3",{id:"c8streams"},"C8Streams"),(0,r.kt)("p",null,"Syntax:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'CREATE SOURCE SourceName WITH (type="stream", stream.list="STRING", replication.type="STRING", map.type=\'type\') (strings);\n')),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'CREATE SOURCE OrderStream WITH (type="stream", stream.list="OrderStream", replication.type="local", map.type=\'json\') (product_id string, quantity integer);\n')),(0,r.kt)("p",null,"Stream application will use the stream with the default query parameters explained in the chart below."),(0,r.kt)("p",null,"Query Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",null,(0,r.kt)("tr",{class:"header"},(0,r.kt)("th",null,"Name"),(0,r.kt)("th",null,"Description"),(0,r.kt)("th",null,"Default Value"),(0,r.kt)("th",null,"Possible Data Types"),(0,r.kt)("th",null,"Optional"))),(0,r.kt)("tbody",null,(0,r.kt)("tr",{class:"odd"},(0,r.kt)("td",null,"stream.list"),(0,r.kt)("td",null,"This specifies the list of streams to which the source must listen. This list can be provided as a set of comma-separated values e.g. `stream_one,stream_two`"),(0,r.kt)("td",null),(0,r.kt)("td",null,"STRING"),(0,r.kt)("td",null,"No")),(0,r.kt)("tr",{class:"even"},(0,r.kt)("td",null,"replication.type"),(0,r.kt)("td",null,"Specifies if the replication type of the streams. Possible values can be `local` and `global`"),(0,r.kt)("td",null,"local"),(0,r.kt)("td",null,"STRING"),(0,r.kt)("td",null,"Yes")))),(0,r.kt)("h3",{id:"c8db"},"C8DB"),(0,r.kt)("p",null,"Syntax:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'CREATE SOURCE SourceName WITH (type="database", collection="STRING", replication.type="STRING", collection.type="STRING", map.type=\'type\') (strings);\n')),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE SOURCE SweetProductionStream WITH (type=\"database\", map.type='json') (name string, amount double);\n")),(0,r.kt)("p",null,"Query Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",null,(0,r.kt)("tr",{class:"header"},(0,r.kt)("th",null,"Name"),(0,r.kt)("th",null,"Description"),(0,r.kt)("th",null,"Default Value"),(0,r.kt)("th",null,"Possible Data Types"),(0,r.kt)("th",null,"Optional"))),(0,r.kt)("tbody",null,(0,r.kt)("tr",{class:"odd"},(0,r.kt)("td",null,"collection"),(0,r.kt)("td",null,"This specifies the name of the c8db collection to which the source must listen."),(0,r.kt)("td",null),(0,r.kt)("td",null,"STRING"),(0,r.kt)("td",null,"No")),(0,r.kt)("tr",{class:"even"},(0,r.kt)("td",null,"replication.type"),(0,r.kt)("td",null,"Specifies if the replication type of the c8db collection. Possible values can be `local` and `global`"),(0,r.kt)("td",null,"local"),(0,r.kt)("td",null,"STRING"),(0,r.kt)("td",null,"Yes")),(0,r.kt)("tr",{class:"odd"},(0,r.kt)("td",null,"collection.type"),(0,r.kt)("td",null,"This specifies the type of the data collection contains. Possible values can be `doc` and `edge`."),(0,r.kt)("td",null,"doc"),(0,r.kt)("td",null,"STRING"),(0,r.kt)("td",null,"Yes")))),(0,r.kt)("h2",{id:"sink"},"Sink"),(0,r.kt)("h3",{id:"c8streams-1"},"C8Streams"),(0,r.kt)("p",null,"Syntax:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'CREATE SINK SinkName WITH (type="stream", stream="STRING", replication.type="STRING", map.type=\'type\') (strings);\n@sink(type="c8streams", stream="<STRING>", replication.type="<STRING>", @map(...)))\n')),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE SINK ProductionAlertStream WITH (type=\"stream\", stream='ProductionAlertStream', map.type='json`) (name string, amount double);\n")),(0,r.kt)("p",null,"Query Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",null,(0,r.kt)("tr",{class:"header"},(0,r.kt)("th",null,"Name"),(0,r.kt)("th",null,"Description"),(0,r.kt)("th",null,"Default Value"),(0,r.kt)("th",null,"Possible Data Types"),(0,r.kt)("th",null,"Optional"))),(0,r.kt)("tbody",null,(0,r.kt)("tr",{class:"odd"},(0,r.kt)("td",null,"stream"),(0,r.kt)("td",null,"The streams to which the C8Stream sink needs to publish events."),(0,r.kt)("td",null),(0,r.kt)("td",null,"STRING"),(0,r.kt)("td",null,"No")),(0,r.kt)("tr",{class:"even"},(0,r.kt)("td",null,"replication.type"),(0,r.kt)("td",null,"Specifies if the replication type of the stream. Possible values can be `local` and `global`"),(0,r.kt)("td",null,"local"),(0,r.kt)("td",null,"STRING"),(0,r.kt)("td",null,"Yes")))),(0,r.kt)("h2",{id:"table"},"Table"),(0,r.kt)("h3",{id:"c8db-1"},"C8DB"),(0,r.kt)("p",null,"Syntax:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'CREATE STORE StoreName WITH (type="database", collection="STRING", replication.type="STRING", collection.type="STRING", map.type=\'type\', from="STRING", to="STRING") (strings);\n')),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'CREATE STORE SweetProductionCollection WITH (type="database", collection="SweetProductionCollection", replication.type="local", map.type=\'json\') (strings);\n')),(0,r.kt)("p",null,"Stream applications will use the c8db with the default query parameters explained in the chart below."),(0,r.kt)("table",null,(0,r.kt)("thead",null,(0,r.kt)("tr",{class:"header"},(0,r.kt)("th",null,"Name"),(0,r.kt)("th",null,"Description"),(0,r.kt)("th",null,"Default Value"),(0,r.kt)("th",null,"Possible Data Types"),(0,r.kt)("th",null,"Optional"))),(0,r.kt)("tbody",null,(0,r.kt)("tr",{class:"odd"},(0,r.kt)("td",null,"collection"),(0,r.kt)("td",null,"This specifies the name of the c8db collection to which events must written."),(0,r.kt)("td",null),(0,r.kt)("td",null,"STRING"),(0,r.kt)("td",null,"No")),(0,r.kt)("tr",{class:"even"},(0,r.kt)("td",null,"replication.type"),(0,r.kt)("td",null,"Specifies if the replication type of the c8db collection. Possible values can be `local` and `global`"),(0,r.kt)("td",null,"local"),(0,r.kt)("td",null,"STRING"),(0,r.kt)("td",null,"Yes")),(0,r.kt)("tr",{class:"odd"},(0,r.kt)("td",null,"collection.type"),(0,r.kt)("td",null,"This specifies the type of the data collection contains. Possible values can be `doc` and `edge`."),(0,r.kt)("td",null,"doc"),(0,r.kt)("td",null,"STRING"),(0,r.kt)("td",null,"Yes")),(0,r.kt)("tr",{class:"even"},(0,r.kt)("td",null,"from"),(0,r.kt)("td",null,"If `collection.type` is specified as `edge`, this field indicates which field to be considered as a source node of the edge."),(0,r.kt)("td",null,"_from"),(0,r.kt)("td",null,"STRING"),(0,r.kt)("td",null,"Yes")),(0,r.kt)("tr",{class:"odd"},(0,r.kt)("td",null,"to"),(0,r.kt)("td",null,"If `collection.type` is specified as `edge`, this field indicates which field to be considered as a destination node of the edge."),(0,r.kt)("td",null,"_to"),(0,r.kt)("td",null,"STRING"),(0,r.kt)("td",null,"Yes")))),(0,r.kt)("h2",{id:"tutorials"},"Tutorials"),(0,r.kt)("p",null,"Following tutorials cover various user scenarios using Macrometa Stream Processing."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/cep/tutorials/publishing-data"},"Publishing Data")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/cep/tutorials/consuming-data"},"Consuming Data")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/cep/tutorials/filtering-data"},"Filtering Data")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/cep/tutorials/transforming-data"},"Transforming Data")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/cep/tutorials/enriching-data"},"Enriching Data")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/cep/tutorials/executing-scripts"},"Executing Scripts")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/cep/tutorials/correlating-data"},"Correlating Data")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/cep/tutorials/summarizing-data"},"Summarizing Data"))),(0,r.kt)("p",null,"Refer to ",(0,r.kt)("a",{parentName:"p",href:"/docs/cep/reference/"},"Reference")," for additional stream processing examples."))}k.isMDXComponent=!0}}]);