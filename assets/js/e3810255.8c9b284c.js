"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8708],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var o=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=i,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||r;return n?o.createElement(f,a(a({ref:t},u),{},{components:n})):o.createElement(f,a({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,a=new Array(r);a[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var c=2;c<r;c++)a[c]=n[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},48634:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return p}});var o=n(83117),i=n(80102),r=(n(67294),n(3905)),a=["components"],s={sidebar_position:1,title:"GeoSpatial"},l=void 0,c={unversionedId:"collections/documents/geospatial/index",id:"collections/documents/geospatial/index",title:"GeoSpatial",description:"Starting with the mass-market availability of smartphones and continuing with IoT devices, self-driving cars ever more data is generated with geo information attached to it. Analyzing this data in real-time requires the use of clever indexing data-structures.",source:"@site/docs/collections/documents/geospatial/index.md",sourceDirName:"collections/documents/geospatial",slug:"/collections/documents/geospatial/",permalink:"/docs/collections/documents/geospatial/",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/collections/documents/geospatial/index.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"GeoSpatial"},sidebar:"tutorialSidebar",previous:{title:"Using Rest APIs",permalink:"/docs/collections/documents/tutorials/using_rest_api"},next:{title:"GeoJSON",permalink:"/docs/collections/documents/geospatial/geojson"}},u={},p=[],d={toc:p};function m(e){var t=e.components,n=(0,i.Z)(e,a);return(0,r.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Starting with the mass-market availability of smartphones and continuing with IoT devices, self-driving cars ever more data is generated with geo information attached to it. Analyzing this data in real-time requires the use of clever indexing data-structures."),(0,r.kt)("p",null,"The GeoJSON functionalities in GDN are based on Google\u2019s S2 geospatial index. We support indexing on a subset of the GeoJSON standard, as well as simple latitude-longitude pairs (Non-GeoJSON mode). "),(0,r.kt)("p",null,"Calculating e.g. the distance between two coordinate tuples or checking whether a coordinate pair is located inside a polygon was possible, but those functions could not benefit by using the geo index optimizations. Those operations need to be as fast as possible to prevent them from being a show stopper."),(0,r.kt)("p",null,"Of course, speed is not everything, so we also want to provide a broader set of geo functionality by integrating full GeoJSON support including ",(0,r.kt)("inlineCode",{parentName:"p"},"Polygons"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Multi-Polygons")," and other geometry primitives."),(0,r.kt)("p",null,"With these functionalities, one can do more complex queries and build e.g. location-aware recommendation engines by combining the graph data model with geo-location aspects or use multiple data models. "),(0,r.kt)("p",null,"For instance, in the age of self-driving cars, one can find the nearest available maintenance team (geo query) with the right permission (graph model) to repair a given problem (sent automatically to the DB as e.g. a JSON document or key/value pair)."),(0,r.kt)("p",null,"Geospatial coordinates consisting of a latitude and longitude value can be stored either as two separate attributes, or as a single attribute in the form of an array with both numeric values. C8 can ",(0,r.kt)("a",{parentName:"p",href:"../../indexing/working-with-indexes#geo-spatial-indexes"},"index such coordinates")," for fast geospatial queries."))}m.isMDXComponent=!0}}]);