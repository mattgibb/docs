"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[66772],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var o=t(67294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,o,l=function(e,n){if(null==e)return{};var t,o,l={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var c=o.createContext({}),s=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=s(e.components);return o.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,l=e.mdxType,i=e.originalType,c=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),d=s(t),m=l,g=d["".concat(c,".").concat(m)]||d[m]||p[m]||i;return t?o.createElement(g,r(r({ref:n},u),{},{components:t})):o.createElement(g,r({ref:n},u))}));function m(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var i=t.length,r=new Array(i);r[0]=d;var a={};for(var c in n)hasOwnProperty.call(n,c)&&(a[c]=n[c]);a.originalType=e,a.mdxType="string"==typeof e?e:l,r[1]=a;for(var s=2;s<i;s++)r[s]=t[s];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},85162:function(e,n,t){t.d(n,{Z:function(){return r}});var o=t(67294),l=t(34334),i="tabItem_Ymn6";function r(e){var n=e.children,t=e.hidden,r=e.className;return o.createElement("div",{role:"tabpanel",className:(0,l.Z)(i,r),hidden:t},n)}},65488:function(e,n,t){t.d(n,{Z:function(){return m}});var o=t(83117),l=t(67294),i=t(34334),r=t(72389),a=t(67392),c=t(7094),s=t(12466),u="tabList__CuJ",p="tabItem_LNqP";function d(e){var n,t,r=e.lazy,d=e.block,m=e.defaultValue,g=e.values,f=e.groupId,b=e.className,y=l.Children.map(e.children,(function(e){if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),h=null!=g?g:y.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),_=(0,a.l)(h,(function(e,n){return e.value===n.value}));if(_.length>0)throw new Error('Docusaurus error: Duplicate values "'+_.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var w=null===m?m:null!=(n=null!=m?m:null==(t=y.find((function(e){return e.props.default})))?void 0:t.props.value)?n:y[0].props.value;if(null!==w&&!h.some((function(e){return e.value===w})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+w+'" but none of its children has the corresponding value. Available values are: '+h.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var k=(0,c.U)(),v=k.tabGroupChoices,T=k.setTabGroupChoices,x=(0,l.useState)(w),C=x[0],E=x[1],D=[],I=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=f){var A=v[f];null!=A&&A!==C&&h.some((function(e){return e.value===A}))&&E(A)}var O=function(e){var n=e.currentTarget,t=D.indexOf(n),o=h[t].value;o!==C&&(I(n),E(o),null!=f&&T(f,String(o)))},N=function(e){var n,t=null;switch(e.key){case"ArrowRight":var o,l=D.indexOf(e.currentTarget)+1;t=null!=(o=D[l])?o:D[0];break;case"ArrowLeft":var i,r=D.indexOf(e.currentTarget)-1;t=null!=(i=D[r])?i:D[D.length-1]}null==(n=t)||n.focus()};return l.createElement("div",{className:(0,i.Z)("tabs-container",u)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":d},b)},h.map((function(e){var n=e.value,t=e.label,r=e.attributes;return l.createElement("li",(0,o.Z)({role:"tab",tabIndex:C===n?0:-1,"aria-selected":C===n,key:n,ref:function(e){return D.push(e)},onKeyDown:N,onFocus:O,onClick:O},r,{className:(0,i.Z)("tabs__item",p,null==r?void 0:r.className,{"tabs__item--active":C===n})}),null!=t?t:n)}))),r?(0,l.cloneElement)(y.filter((function(e){return e.props.value===C}))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},y.map((function(e,n){return(0,l.cloneElement)(e,{key:n,hidden:e.props.value!==C})}))))}function m(e){var n=(0,r.Z)();return l.createElement(d,(0,o.Z)({key:String(n)},e))}},73172:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return u},default:function(){return f},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return m}});var o=t(83117),l=t(80102),i=(t(67294),t(3905)),r=t(65488),a=t(85162),c=["components"],s={sidebar_position:2,title:"Quickstart"},u="Quickstart - Document Collections",p={unversionedId:"collections/documents/tutorials/working-with-documents",id:"collections/documents/tutorials/working-with-documents",title:"Quickstart",description:"This page guides you through quickly getting started with document collections.",source:"@site/docs/collections/documents/tutorials/working-with-documents.md",sourceDirName:"collections/documents/tutorials",slug:"/collections/documents/tutorials/working-with-documents",permalink:"/docs/collections/documents/tutorials/working-with-documents",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/collections/documents/tutorials/working-with-documents.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Quickstart"},sidebar:"tutorialSidebar",previous:{title:"Tutorials",permalink:"/docs/collections/documents/tutorials/"},next:{title:"Bulk Update with RestQL",permalink:"/docs/collections/documents/tutorials/bulk-update-restql"}},d={},m=[{value:"Pre-requisite",id:"pre-requisite",level:2},{value:"SDK download",id:"sdk-download",level:2},{value:"Code Sample",id:"code-sample",level:2}],g={toc:m};function f(e){var n=e.components,t=(0,l.Z)(e,c);return(0,i.kt)("wrapper",(0,o.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"quickstart---document-collections"},"Quickstart - Document Collections"),(0,i.kt)("p",null,"This page guides you through quickly getting started with document collections."),(0,i.kt)("h2",{id:"pre-requisite"},"Pre-requisite"),(0,i.kt)("p",null,"Let's assume your"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Tenant name is ",(0,i.kt)("inlineCode",{parentName:"li"},"nemo@nautilus.com")," and"),(0,i.kt)("li",{parentName:"ul"},"User password is ",(0,i.kt)("inlineCode",{parentName:"li"},"xxxxxx"),".")),(0,i.kt)("h2",{id:"sdk-download"},"SDK download"),(0,i.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,i.kt)(a.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"  pyC8 requires Python 3.5+. Python 3.6 or higher is recommended\n\n  To install pyC8, simply run\n\n      $ pip3 install pyC8\n\n  or, if you prefer to use conda:\n\n      conda install -c conda-forge pyC8\n\n  or pipenv:\n\n      pipenv install --pre pyC8\n\n  Once the installation process is finished, you can begin developing applications in Python.\n"))),(0,i.kt)(a.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"  With Yarn or NPM\n\n      yarn add jsc8\n      (or)\n      npm install jsc8\n\n  If you want to use the SDK outside of the current directory, you can also install it globally using the `--global` flag:\n\n      npm install --global jsc8\n\n  From source,\n\n      git clone https://github.com/macrometacorp/jsc8.git\n      cd jsC8\n      npm install\n      npm run dist\n")))),(0,i.kt)("h2",{id:"code-sample"},"Code Sample"),(0,i.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,i.kt)(a.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},'  from c8 import C8Client\n  import pprint\n  import time\n\n  if __name__ == \'__main__\':\n\n    # Variables - URLs\n    global_url = "gdn.paas.macrometa.io"\n    region_urls = [\n        "https://gdn-sfo2.prod.macrometa.io",\n        "https://gdn-us-west1.prod.macrometa.io",\n        "https://gdn-nyc1.prod.macrometa.io"\n    ]\n\n    # Variables - DB\n    email = "nemo@nautilus.com"\n    password = "xxxxx"\n    geo_fabric = "_system"\n    collection_name = "ddoslist"\n    ip_address = "20.1.1.9"\n\n    # Variables - Queries\n    read_query = "FOR device in ddoslist " + "FILTER device.ip == \\"" + ip_address + "\\"RETURN { IP:device.ip, IsAllowed:device.action}"\n\n    insert_query = "INSERT { \\"ip\\" : \\"" + ip_address + "\\", \\"action\\": \\"block\\", \\"rule\\":\\"blacklistA\\"} INTO ddoslist"\n\n\n    # Variables - Data\n    data = [\n      {"ip": "10.1.1.1", "action": "block", "rule": "blacklistA"},\n      {"ip": "20.1.1.2", "action": "block", "rule": "blacklistA"},\n      {"ip": "30.1.1.3", "action": "block", "rule": "blacklistB"},\n      {"ip": "40.1.1.4", "action": "block", "rule": "blacklistA"},\n      {"ip": "50.1.1.5", "action": "block", "rule": "blacklistB"},\n      {"ip": "20.1.1.3", "action": "allow", "rule": "whitelistA"},\n      {"ip": "20.1.1.4", "action": "allow", "rule": "whitelistA"},\n      {"ip": "30.1.1.4", "action": "allow", "rule": "whitelistB"},\n      {"ip": "30.1.1.5", "action": "allow", "rule": "whitelistB"}\n    ]\n    pp = pprint.PrettyPrinter(indent=4)\n\n    # Step1: Open connection to GDN. You will be routed to closest region.\n    print("1. CONNECT: federation: {},  user: {}".format(global_url, email))\n    client = C8Client(protocol=\'https\', host=global_url, port=443,\n                      email=email, password=password,\n                      geofabric=geo_fabric)    \n\n    # Step2: Create a collection if not exists\n    print("2. CREATE_COLLECTION: region: {},  collection: {}".format(global_url, collection_name))\n    if client.has_collection(collection_name):\n        collection = client.collection(collection_name)\n    else:\n        collection = client.create_collection(collection_name)\n\n    # Step3: Insert data into collection.\n    print("3. INSERT_DDOS_DATA: in region: {}".format(global_url))\n    client.insert_document(collection_name, document=data)\n\n    # Step4: Read Data\n    print("4. IS_IP_ALLOWED...from region: {}".format(global_url))\n    cursor = client.execute_query(read_query)\n    docs = [document for document in cursor]\n    if docs == []:\n      print("IP: {}, IsAllowed: {}\\n".format(ip_address, "\'allow\'"))\n    else:\n      pp.pprint(docs)\n\n\n    # Step5: Blacklist IP Address\n    print("5. BLACKLIST the IP...from region: {}, ip: {}".format(global_url, ip_address))\n    cursor = client.execute_query(insert_query)\n    time.sleep(0.3)\n\n    # Step6: Read Data from other regions.\n    print("6. Check again if IP is allowed globally")\n    for region_url in region_urls:\n      print("\\n IS_IP_ALLOWED...checking from region: {}".format(region_url))\n      clientx = C8Client(protocol=\'https\', host=region_url, port=443, email=email, password=password,\n                          geofabric=geo_fabric)\n      cursorx = clientx.execute_query(read_query)\n      docs = [document for document in cursorx]\n      pp.pprint(docs[0])\n\n    # Step7: Delete Data\n    print("\\n7. DELETE_DATA: region: {}, collection: {}".format(global_url, collection_name))\n    collection.truncate()\n    #client.delete_collection(collection_name)\n'))),(0,i.kt)(a.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'  \'use strict\'\n\n  const jsc8 = require(\'jsc8\');\n\n  // Variables - DB\n  global_url = "https://gdn.paas.macrometa.io";\n  region_urls = [\n    "https://gdn-sfo2.prod.macrometa.io",\n    "https://gdn-us-west1.prod.macrometa.io",\n    "https://gdn-nyc1.prod.macrometa.io"\n  ];\n\n  // Crete a authenticated instance with Token / Apikey\n  // const client = new jsc8({url: global_url, token: "XXXX", fabricName: \'_system\'});\n  // const client = new jsc8({url: global_url, apiKey: "XXXX", fabricName: \'_system\'});\n  // await console.log("Authentication done!!...");\n\n  // Or use Email & Password to Authenticate client instance\n  const client = new jsc8(global_url);\n\n  await client.login("nemo@nautilus.com", "xxxx");\n\n  //Variables\n  const collection_name = "ddoslist";\n  const ip_address = "20.1.1.9";\n\n  // Variables - Queries\n  const read_query = `FOR device in ddoslist FILTER device.ip == "${ip_address}" RETURN { IP:device.ip, IsAllowed:device.action}`;\n\n  const insert_query = "INSERT { \\"ip\\" : \\"" + ip_address + "\\", \\"action\\": \\"block\\", \\"rule\\":\\"blacklistA\\"} INTO ddoslist";\n\n  // Variables - Data\n  const data = [\n    {"ip": "10.1.1.1", "action": "block", "rule": "blacklistA"},\n    {"ip": "20.1.1.2", "action": "block", "rule": "blacklistA"},\n    {"ip": "30.1.1.3", "action": "block", "rule": "blacklistB"},\n    {"ip": "40.1.1.4", "action": "block", "rule": "blacklistA"},\n    {"ip": "50.1.1.5", "action": "block", "rule": "blacklistB"},\n    {"ip": "20.1.1.3", "action": "allow", "rule": "whitelistA"},\n    {"ip": "20.1.1.4", "action": "allow", "rule": "whitelistA"},\n    {"ip": "30.1.1.4", "action": "allow", "rule": "whitelistB"},\n    {"ip": "30.1.1.5", "action": "allow", "rule": "whitelistB"}\n  ];\n\n  async function createCollection() {\n    console.log("\\n 2. CREATE_COLLECTION");\n\n    try{\n        console.log(`Creating the collection ${collection_name}...`);\n        const exists_coll = await client.hasCollection(collection_name);\n        if (exists_coll === false) {\n          await client.createCollection(collection_name);\n        }\n    } catch (e) {\n      await console.log("Collection creation did not succeed due to " + e);\n    }\n  }\n\n  async function insertData() {\n    console.log(`\\n 3. INSERT_DATA in region ${global_url}`);\n    await client.insertDocumentMany(collection_name, docs);\n  }\n\n  async function readData(){\n    console.log(`\\n 4. READ_DATA in region ${global_url}`);\n    console.log(`\\n IS_IP_ALLOWED...from region: ${global_url}`);\n    let result = await client.executeQuery(read_query);\n    if(result.length === 0){\n      console.log(`IP: ${ip_address}, IsAllowed: \'allow\'`);\n    }\n    else{\n      console.log(result);\n    }\n\n    console.log(`\\n 5. BLACKLIST the IP...from region: ${global_url}, ip: ${ip_address}`);\n    result = await client.executeQuery(insert_query);\n  }\n\n  async function readDataFromAllRegions(){\n    console.log("\\n 6. CHECK_IF_IP_ALLOWED_GLOBALLY");\n    for (let i = 0; i < region_urls.length; i++) { \n        // Crete a authenticated instance with Token / Apikey\n        // const regionclient = new jsc8({url: region_urls[i], token: "XXXX", fabricName: \'_system\'});\n        // const regionclient = new jsc8({url: region_urls[i], apiKey: "XXXX", fabricName: \'_system\'});\n        // await console.log("Authentication done!!...");\n\n        // Or use Email & Password to Authenticate client instance\n        const regionclient = new jsc8(region_urls[i]);\n        await regionclient.login("nemo@nautilus.com", "xxxxxx");\n\n        console.log(`\\n 6. Ip allowed in region : ${region_urls[i]}`);\n        let result = await client.executeQuery(read_query);\n        console.log(result);\n    }\n\n  }\n\n  async function deleteData(){\n    console.log("\\n 6. DELETE_DATA");\n    await client.deleteCollection(collection_name);\n  }\n\n  (async function(){\n    await createCollection();\n    await insertData();\n    await readData();\n    await readDataFromAllRegions();\n    await deleteData();\n  })();\n')))))}f.isMDXComponent=!0}}]);