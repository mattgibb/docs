"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8261],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return d}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),m=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=m(e.components);return a.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,u=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),c=m(n),d=r,h=c["".concat(u,".").concat(d)]||c[d]||p[d]||i;return n?a.createElement(h,l(l({ref:t},s),{},{components:n})):a.createElement(h,l({ref:t},s))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=c;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var m=2;m<i;m++)l[m]=n[m];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},41017:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return u},default:function(){return d},frontMatter:function(){return o},metadata:function(){return m},toc:function(){return p}});var a=n(83117),r=n(80102),i=(n(67294),n(3905)),l=["components"],o={title:"externalTimeBatch (Window)"},u=void 0,m={unversionedId:"cep/reference/functions/unique/externalTimeBatch",id:"cep/reference/functions/unique/externalTimeBatch",title:"externalTimeBatch (Window)",description:"This is a batch (tumbling) time window that is determined based on an",source:"@site/docs/cep/reference/functions/unique/externalTimeBatch.md",sourceDirName:"cep/reference/functions/unique",slug:"/cep/reference/functions/unique/externalTimeBatch",permalink:"/docs/cep/reference/functions/unique/externalTimeBatch",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/cep/reference/functions/unique/externalTimeBatch.md",tags:[],version:"current",frontMatter:{title:"externalTimeBatch (Window)"},sidebar:"tutorialSidebar",previous:{title:"ever (Window)",permalink:"/docs/cep/reference/functions/unique/ever"},next:{title:"first (Window)",permalink:"/docs/cep/reference/functions/unique/first"}},s={},p=[{value:"Query Parameters",id:"query-parameters",level:2},{value:"Example 1",id:"example-1",level:2}],c={toc:p};function d(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This is a batch (tumbling) time window that is determined based on an\nexternal time, i.e., time stamps that are specified via an attribute in\nthe events. It holds the latest unique events that arrived during the\nlast window time period. The unique events are determined based on the\nvalue for a specified unique key parameter. When a new event arrives\nwithin the time window with a value for the unique key parameter that is\nthe same as that of an existing event in the window, the existing event\nexpires and it is replaced by the new event."),(0,i.kt)("p",null,"Syntax"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"unique:externalTimeBatch(<INT|LONG|FLOAT|BOOL|DOUBLE|STRING> unique.key, <LONG> time.stamp, <INT|LONG> window.time)\nunique:externalTimeBatch(<INT|LONG|FLOAT|BOOL|DOUBLE|STRING> unique.key, <LONG> time.stamp, <INT|LONG> window.time, <INT> start.time)\nunique:externalTimeBatch(<INT|LONG|FLOAT|BOOL|DOUBLE|STRING> unique.key, <LONG> time.stamp, <INT|LONG> window.time, <INT> start.time, <INT|LONG> time.out)\nunique:externalTimeBatch(<INT|LONG|FLOAT|BOOL|DOUBLE|STRING> unique.key, <LONG> time.stamp, <INT|LONG> window.time, <INT> start.time, <INT|LONG> time.out, <BOOL> replace.time.stamp.with.batch.end.time)\n")),(0,i.kt)("h2",{id:"query-parameters"},"Query Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"),(0,i.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,i.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,i.kt)("th",{parentName:"tr",align:null},"Optional"),(0,i.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"unique.key"),(0,i.kt)("td",{parentName:"tr",align:null},"The attribute that should be checked for uniqueness."),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"INT LONG FLOAT BOOL DOUBLE STRING"),(0,i.kt)("td",{parentName:"tr",align:null},"No"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"time.stamp"),(0,i.kt)("td",{parentName:"tr",align:null},"The time which the window determines as the current time and acts upon. The value of this parameter should be monotonically increasing."),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"LONG"),(0,i.kt)("td",{parentName:"tr",align:null},"No"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"window.time"),(0,i.kt)("td",{parentName:"tr",align:null},"The sliding time period for which the window should hold events."),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"INT LONG"),(0,i.kt)("td",{parentName:"tr",align:null},"No"),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"start.time"),(0,i.kt)("td",{parentName:"tr",align:null},"This specifies an offset in milliseconds in order to start the window at a time different to the standard time."),(0,i.kt)("td",{parentName:"tr",align:null},"Timestamp of first event"),(0,i.kt)("td",{parentName:"tr",align:null},"INT"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes"),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"time.out"),(0,i.kt)("td",{parentName:"tr",align:null},"Time to wait for arrival of a new event, before flushing and returning the output for events belonging to a specific batch."),(0,i.kt)("td",{parentName:"tr",align:null},"The system waits till an event from the next batch arrives to flush the current batch"),(0,i.kt)("td",{parentName:"tr",align:null},"INT LONG"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes"),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"replace.time.stamp.with.batch.end.time"),(0,i.kt)("td",{parentName:"tr",align:null},"Replaces the ",(0,i.kt)("inlineCode",{parentName:"td"},"timestamp")," value with the corresponding batch end time stamp."),(0,i.kt)("td",{parentName:"tr",align:null},"false"),(0,i.kt)("td",{parentName:"tr",align:null},"BOOL"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes"),(0,i.kt)("td",{parentName:"tr",align:null},"No")))),(0,i.kt)("h2",{id:"example-1"},"Example 1"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"CREATE STREAM LoginEvents (timestamp long, ip string);\n\ninsert into UniqueIps \nselect timestamp, ip, count() as total\nfrom LoginEvents WINDOW UNIQUE:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec);\n")),(0,i.kt)("p",null,"In this query, the window holds the latest unique events that arrive\nfrom the ",(0,i.kt)("inlineCode",{parentName:"p"},"LoginEvent")," stream during each second. The latest events are\ndetermined based on the external time stamp. At a given time, all the\nevents held in the window have unique values for the ",(0,i.kt)("inlineCode",{parentName:"p"},"ip")," and\nmonotonically increasing values for ",(0,i.kt)("inlineCode",{parentName:"p"},"timestamp")," attributes. The events\nin the window are inserted into the ",(0,i.kt)("inlineCode",{parentName:"p"},"UniqueIps")," output stream. The\nsystem waits for 2 seconds for the arrival of a new event before\nflushing the current batch."))}d.isMDXComponent=!0}}]);