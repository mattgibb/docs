"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[58065],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return u}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),m=c(t),u=o,f=m["".concat(l,".").concat(u)]||m[u]||p[u]||a;return t?r.createElement(f,s(s({ref:n},d),{},{components:t})):r.createElement(f,s({ref:n},d))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,s=new Array(a);s[0]=m;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var c=2;c<a;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},81571:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return p}});var r=t(83117),o=t(80102),a=(t(67294),t(3905)),s=["components"],i={title:"Import and Export Commands"},l="Import-Export",c={unversionedId:"cli/import-export-cli",id:"cli/import-export-cli",title:"Import and Export Commands",description:"gdnsl import",source:"@site/docs/cli/import-export-cli.md",sourceDirName:"cli",slug:"/cli/import-export-cli",permalink:"/docs/cli/import-export-cli",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/cli/import-export-cli.md",tags:[],version:"current",frontMatter:{title:"Import and Export Commands"},sidebar:"tutorialSidebar",previous:{title:"Graph Vertex Commands",permalink:"/docs/cli/graph-vertex-cli"},next:{title:"Index Commands",permalink:"/docs/cli/indexes-cli"}},d={},p=[{value:"gdnsl import",id:"gdnsl-import",level:2},{value:"gdnsl export",id:"gdnsl-export",level:2}],m={toc:p};function u(e){var n=e.components,t=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"import-export"},"Import-Export"),(0,a.kt)("h2",{id:"gdnsl-import"},"gdnsl import"),(0,a.kt)("p",null,"Import collection data."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"gdnsl import COLLECTION-NAME [flags]\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Examples:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'\n  # Import documents in the "addresses" collection\n  gdnsl import addresses --json "[{\\"name\\": \\"John\\"}, {\\"lname\\": \\"Doe\\"}]"\n\n  # Import documents in the "addresses" collection with primaryKey as "name"\n  gdnsl import addresses --json "[{\\"name\\": \\"John\\"}, {\\"lname\\": \\"Doe\\"}]" --primary-key "name"\n\n  # Import documents with existing document having same _key in the colletion, shall be replaced\n  gdnsl import addresses --json "[{\\"name\\": \\"John\\"}, {\\"lname\\": \\"Doe\\"}]" --replace\n\n  # Import documents with extra information for errors and unprocessed documents returned in the result\n  gdnsl import addresses --json "[{\\"name\\": \\"John\\"}, {\\"lname\\": \\"Doe\\"}]" --details\n\n  # Import documents in the "addresses" collection\n  gdnsl import addresses --csv "John,Doe\\nJane,Doe" --columns "name,lname"\n\n  # Import documents in the "addresses" collection with primaryKey as "name"\n  gdnsl import addresses --csv "John,Doe\\nJane,Doe" --columns "name,lname" --primary-key "name"\n\n  # Import documents with existing document having same _key in the colletion, shall be replaced\n  gdnsl import addresses --csv "John,Doe\\nJane,Doe" --columns "name,lname" --replace\n\n  # Import documents with extra information for errors and unprocessed documents returned in the result\n  gdnsl import addresses --csv "John,Doe\\nJane,Doe" --columns "name,lname" --details\n\n  # Import documents from a JSON file\n  gdnsl import --file "path_to_file/import.json"\n\n  # Import documents from a CSV file\n  gdnsl import --file "path_to_file/import.csv"\n\n  # Import documents in the "addresses" collection with a batch size of 1000\n  gdnsl import addresses --file "import.json" --batch-size=1000\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Options:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"  -h, --help                Help for query import command.\n\n  --json string             Should be an array of json documents. Each document is interpreted separately. For large data use --file instead.\n\n  --csv string              Should be an array of csv rows. Each row is separated by a newline character. For large data use --file instead.\n\n  --columns                 String should be a comma separated list of column names.\n\n  --primary-key string      If specified, this attribure will be used as _key of the new document. It must follow the [naming conventions](../naming-conventions.md#document-keys). If document already contains _key then it will be renamed as old_key.\n\n  --replace                 If true existing document having same _key in the colletion, shall be replaced.\n\n  --details                 If true extra information for errors and unprocessed documents will be returned in the result.\n\n  --batch-size              Number of docs to be imported in a batch. Cannot be greater than the set tenant limit. \n                            Default will the tenant limit. Works with the --file flag.\n\n  --file string             Path to JSON or CSV file. File format is inferred from the file extension.\n\n  --fabric                  Name of the fabric to use.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Options inherited:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"      --config string       gdnsl config file (default is ./gdnsl.yaml)\n")),(0,a.kt)("h2",{id:"gdnsl-export"},"gdnsl export"),(0,a.kt)("p",null,"Export data from a collection or via a query."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"gdnsl export [flags]\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Examples:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'\n  # Export data returned by the query\n  gdnsl export --query "FOR doc IN addresses RETURN doc"\n\n  # Export data returned by the query with based on the given filter\n  gdnsl export --query "FOR doc IN addresses FILTER doc.country == @country RETURN doc" --param "country=USA"\n\n  # Export data returned by the query in CSV format\n  gdnsl export --query "FOR doc IN addresses RETURN doc" --csv\n\n  # Export data returned by the query in JSON format to a file\n  gdnsl export --query "FOR doc IN addresses RETURN doc" --file test.json\n\n  # Export data from "addresses" collection\n  gdnsl export --collection addresses\n\n  # Export data from "addresses" collection with offset as 10\n  gdnsl export --collection addresses --offset 10\n\n  # Export data from "addresses" collection with limit as 10\n  gdnsl export --collection addresses --limit 10\n\n  # Export data from "addresses" collection in descending order\n  gdnsl export --collection addresses --order desc\n\n  # Export data from "addresses" collection in CSV format\n  gdnsl export --collection addresses --csv\n\n  # Export data from "addresses" collection in CSV format\n  gdnsl export --collection addresses --file test.csv\n\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Options:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'  -h, --help                Help for service.\n      --query string        Query string to execute and export data.\n      --param string        Params to be given to the query. Can be given multiple times.\n      --csv string          To export in csv format. Default is "json".\n      --collection string   Collection name to export data from.\n      --offset number       This option can be used to simulate paging. Default: 0.\n      --limit number        This option can be used to simulate paging. Limit the result. Default: 20, Max: 1000.\n      --order  string       Order the results asc or desc. Default: asc.\n      --file string         Path to JSON or CSV file. File format is inferred from the file extension.\n      --fabric              Name of the fabric to use.\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Options inherited:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"      --config string       gdnsl config file (default is ./gdnsl.yaml)\n")))}u.isMDXComponent=!0}}]);