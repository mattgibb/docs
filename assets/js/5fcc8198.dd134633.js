"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[10155],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=s(n),d=a,k=c["".concat(p,".").concat(d)]||c[d]||m[d]||l;return n?r.createElement(k,i(i({ref:t},u),{},{components:n})):r.createElement(k,i({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var s=2;s<l;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},25549:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return m}});var r=n(83117),a=n(80102),l=(n(67294),n(3905)),i=["components"],o={title:"tokenize (Stream Processor)"},p=void 0,s={unversionedId:"cep/reference/functions/json/tokenize",id:"cep/reference/functions/json/tokenize",title:"tokenize (Stream Processor)",description:"Stream processor tokenizes the given JSON into to multiple JSON string elements and sends them as separate events.",source:"@site/docs/cep/reference/functions/json/tokenize.md",sourceDirName:"cep/reference/functions/json",slug:"/cep/reference/functions/json/tokenize",permalink:"/docs/cep/reference/functions/json/tokenize",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/cep/reference/functions/json/tokenize.md",tags:[],version:"current",frontMatter:{title:"tokenize (Stream Processor)"},sidebar:"tutorialSidebar",previous:{title:"toString (Function)",permalink:"/docs/cep/reference/functions/json/toString"},next:{title:"tokenizeAsObject (Stream Processor)",permalink:"/docs/cep/reference/functions/json/tokenizeAsObject"}},u={},m=[{value:"Query Parameters",id:"query-parameters",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2}],c={toc:m};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,l.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Stream processor tokenizes the given JSON into to multiple JSON string elements and sends them as separate events."),(0,l.kt)("p",null,"Syntax"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"json:tokenize(<STRING|OBJECT> json, <STRING> path)\njson:tokenize(<STRING|OBJECT> json, <STRING> path, <BOOL> fail.on.missing.attribute)\n")),(0,l.kt)("h2",{id:"query-parameters"},"Query Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,l.kt)("th",{parentName:"tr",align:null},"Optional"),(0,l.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"json"),(0,l.kt)("td",{parentName:"tr",align:null},"The input JSON that needs to be tokenized."),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"STRING OBJECT"),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"path"),(0,l.kt)("td",{parentName:"tr",align:null},"The path of the set of elements that will be tokenized."),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"STRING"),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"fail.on.missing.attribute"),(0,l.kt)("td",{parentName:"tr",align:null},"If there are no element on the given path, when set to ",(0,l.kt)("inlineCode",{parentName:"td"},"true")," the system will drop the event, and when set to ",(0,l.kt)("inlineCode",{parentName:"td"},"false")," the system will pass ",(0,l.kt)("inlineCode",{parentName:"td"},"null")," value to the jsonElement output attribute."),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"BOOL"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null},"No")))),(0,l.kt)("p",null,"Extra Return Attributes"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Possible Types"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"jsonElement"),(0,l.kt)("td",{parentName:"tr",align:null},"The JSON element retrieved based on the given path will be returned as a JSON string. If the ",(0,l.kt)("inlineCode",{parentName:"td"},"path")," selects a JSON array then the system returns each element in the array as a JSON string via a separate events."),(0,l.kt)("td",{parentName:"tr",align:null},"STRING")))),(0,l.kt)("h2",{id:"example-1"},"Example 1"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"CREATE STREAM InputStream (json string, path string);\n\n@info(name = 'query1')\ninsert into OutputStream\nselect path, jsonElement\nfrom InputStream#json:tokenizeAsObject(json, path);\n")),(0,l.kt)("p",null,"If the input ",(0,l.kt)("inlineCode",{parentName:"p"},"json")," is ",(0,l.kt)("inlineCode",{parentName:"p"},"{name:'John', enrolledSubjects:['Mathematics', 'Physics']}"),", and the ",(0,l.kt)("inlineCode",{parentName:"p"},"path")," is passed as ",(0,l.kt)("inlineCode",{parentName:"p"},"$.enrolledSubjects")," then for both the elements in the selected JSON array, it generates it generates events as ",(0,l.kt)("inlineCode",{parentName:"p"},"('$.enrolledSubjects', 'Mathematics')"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"('$.enrolledSubjects', 'Physics')"),". For the same input JSON, if the ",(0,l.kt)("inlineCode",{parentName:"p"},"path")," is passed as ",(0,l.kt)("inlineCode",{parentName:"p"},"$.name")," then it will only produce one event ",(0,l.kt)("inlineCode",{parentName:"p"},"('$.name', 'John')")," as the ",(0,l.kt)("inlineCode",{parentName:"p"},"path")," provided a single JSON element."),(0,l.kt)("h2",{id:"example-2"},"Example 2"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"CREATE STREAM InputStream (json string, path string);\n\n@info(name = 'query1')\ninsert into OutputStream\nselect path, jsonElement\nfrom InputStream#json:tokenizeAsObject(json, path, true);\n")),(0,l.kt)("p",null,"If the input ",(0,l.kt)("inlineCode",{parentName:"p"},"json")," is ",(0,l.kt)("inlineCode",{parentName:"p"},"{name:'John', age:25}"),",and the ",(0,l.kt)("inlineCode",{parentName:"p"},"path")," is passed as ",(0,l.kt)("inlineCode",{parentName:"p"},"$.salary")," then the system will produce ",(0,l.kt)("inlineCode",{parentName:"p"},"('$.salary', null)"),", as the ",(0,l.kt)("inlineCode",{parentName:"p"},"fail.on.missing.attribute")," is ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," and there are no matching element for ",(0,l.kt)("inlineCode",{parentName:"p"},"$.salary"),"."))}d.isMDXComponent=!0}}]);