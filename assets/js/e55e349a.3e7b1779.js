"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[40502],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return f}});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):p(p({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=u(r),f=a,d=m["".concat(l,".").concat(f)]||m[f]||s[f]||o;return r?n.createElement(d,p(p({ref:t},c),{},{components:r})):n.createElement(d,p({ref:t},c))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,p=new Array(o);p[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,p[1]=i;for(var u=2;u<o;u++)p[u]=r[u];return n.createElement.apply(null,p)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},6307:function(e,t,r){r.r(t),r.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return s}});var n=r(83117),a=r(80102),o=(r(67294),r(3905)),p=["components"],i={title:"keyvalue (Source Mapper)"},l=void 0,u={unversionedId:"cep/reference/functions/sourcemapper/keyvalue",id:"cep/reference/functions/sourcemapper/keyvalue",title:"keyvalue (Source Mapper)",description:"Key-Value Map to Event input mapper extension allows transports that",source:"@site/docs/cep/reference/functions/sourcemapper/keyvalue.md",sourceDirName:"cep/reference/functions/sourcemapper",slug:"/cep/reference/functions/sourcemapper/keyvalue",permalink:"/docs/cep/reference/functions/sourcemapper/keyvalue",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/cep/reference/functions/sourcemapper/keyvalue.md",tags:[],version:"current",frontMatter:{title:"keyvalue (Source Mapper)"},sidebar:"tutorialSidebar",previous:{title:"json (Source Mapper)",permalink:"/docs/cep/reference/functions/sourcemapper/json"},next:{title:"passThrough (Source Mapper)",permalink:"/docs/cep/reference/functions/sourcemapper/passThrough"}},c={},s=[{value:"Query Parameters",id:"query-parameters",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2}],m={toc:s};function f(e){var t=e.components,r=(0,a.Z)(e,p);return(0,o.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Key-Value Map to Event")," input mapper extension allows transports that\naccept events as key value maps to convert those events to Stream App\nevents. You can either receive pre-defined keys where conversion takes\nplace without extra configurations, or use custom keys to map from the\nmessage."),(0,o.kt)("p",null,"Syntax"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'CREATE SOURCE <NAME> WITH (map.type="keyvalue", map.fail.on.missing.attribute="<BOOL>")\n')),(0,o.kt)("h2",{id:"query-parameters"},"Query Parameters"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Name"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"),(0,o.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,o.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,o.kt)("th",{parentName:"tr",align:null},"Optional"),(0,o.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"fail.on.missing.attribute"),(0,o.kt)("td",{parentName:"tr",align:null},"If this parameter is set to ",(0,o.kt)("inlineCode",{parentName:"td"},"true"),", if an event arrives without a matching key for a specific attribute in the connected stream, it is dropped and not processed by the Stream Processor. If this parameter is set to ",(0,o.kt)("inlineCode",{parentName:"td"},"false")," the Stream Processor adds the required key to such events with a null value, and the event is converted to a Stream App event so that you could handle them as required before they are further processed."),(0,o.kt)("td",{parentName:"tr",align:null},"true"),(0,o.kt)("td",{parentName:"tr",align:null},"BOOL"),(0,o.kt)("td",{parentName:"tr",align:null},"Yes"),(0,o.kt)("td",{parentName:"tr",align:null},"No")))),(0,o.kt)("h2",{id:"example-1"},"Example 1"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"CREATE SOURCE FooStream WITH (type='inMemory', topic='stock', map.type='keyvalue') (symbol string, price float, volume long);\n")),(0,o.kt)("p",null,"This query performs a default key value input mapping. The expected\ninput is a map similar to the following: symbol: ",(0,o.kt)("inlineCode",{parentName:"p"},"gdn")," price: 55.6f\nvolume: 100"),(0,o.kt)("h2",{id:"example-2"},"Example 2"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"CREATE SOURCE FooStream WITH (type='inMemory', topic='stock', map.type='keyvalue', map.fail.on.missing.attribute='true', map.attributes=\"symbol = 's', price = 'p', volume = 'v'\") (symbol string, price float, volume long);\n")),(0,o.kt)("p",null,"This query performs a custom key value input mapping. The matching keys\nfor the ",(0,o.kt)("inlineCode",{parentName:"p"},"symbol"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"price")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"volume")," attributes are be ",(0,o.kt)("inlineCode",{parentName:"p"},"s"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"p"),", and\n",(0,o.kt)("inlineCode",{parentName:"p"},"v")," respectively. The expected input is a map similar to the following:\ns: ",(0,o.kt)("inlineCode",{parentName:"p"},"gdn")," p: 55.6 v: 100"))}f.isMDXComponent=!0}}]);