"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[17363],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return d}});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=c(t),d=o,f=m["".concat(s,".").concat(d)]||m[d]||p[d]||r;return t?a.createElement(f,i(i({ref:n},u),{},{components:t})):a.createElement(f,i({ref:n},u))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<r;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},85162:function(e,n,t){t.d(n,{Z:function(){return i}});var a=t(67294),o=t(34334),r="tabItem_Ymn6";function i(e){var n=e.children,t=e.hidden,i=e.className;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(r,i),hidden:t},n)}},65488:function(e,n,t){t.d(n,{Z:function(){return d}});var a=t(83117),o=t(67294),r=t(34334),i=t(72389),l=t(67392),s=t(7094),c=t(12466),u="tabList__CuJ",p="tabItem_LNqP";function m(e){var n,t,i=e.lazy,m=e.block,d=e.defaultValue,f=e.values,y=e.groupId,g=e.className,_=o.Children.map(e.children,(function(e){if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),h=null!=f?f:_.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),b=(0,l.l)(h,(function(e,n){return e.value===n.value}));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var v=null===d?d:null!=(n=null!=d?d:null==(t=_.find((function(e){return e.props.default})))?void 0:t.props.value)?n:_[0].props.value;if(null!==v&&!h.some((function(e){return e.value===v})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+v+'" but none of its children has the corresponding value. Available values are: '+h.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var k=(0,s.U)(),w=k.tabGroupChoices,C=k.setTabGroupChoices,T=(0,o.useState)(v),E=T[0],x=T[1],N=[],A=(0,c.o5)().blockElementScrollPositionUntilNextRender;if(null!=y){var D=w[y];null!=D&&D!==E&&h.some((function(e){return e.value===D}))&&x(D)}var O=function(e){var n=e.currentTarget,t=N.indexOf(n),a=h[t].value;a!==E&&(A(n),x(a),null!=y&&C(y,String(a)))},I=function(e){var n,t=null;switch(e.key){case"ArrowRight":var a,o=N.indexOf(e.currentTarget)+1;t=null!=(a=N[o])?a:N[0];break;case"ArrowLeft":var r,i=N.indexOf(e.currentTarget)-1;t=null!=(r=N[i])?r:N[N.length-1]}null==(n=t)||n.focus()};return o.createElement("div",{className:(0,r.Z)("tabs-container",u)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":m},g)},h.map((function(e){var n=e.value,t=e.label,i=e.attributes;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:E===n?0:-1,"aria-selected":E===n,key:n,ref:function(e){return N.push(e)},onKeyDown:I,onFocus:O,onClick:O},i,{className:(0,r.Z)("tabs__item",p,null==i?void 0:i.className,{"tabs__item--active":E===n})}),null!=t?t:n)}))),i?(0,o.cloneElement)(_.filter((function(e){return e.props.value===E}))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},_.map((function(e,n){return(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==E})}))))}function d(e){var n=(0,i.Z)();return o.createElement(m,(0,a.Z)({key:String(n)},e))}},16372:function(e,n,t){t.r(n),t.d(n,{assets:function(){return m},contentTitle:function(){return u},default:function(){return y},frontMatter:function(){return c},metadata:function(){return p},toc:function(){return d}});var a=t(83117),o=t(80102),r=(t(67294),t(3905)),i=t(65488),l=t(85162),s=["components"],c={sidebar_position:6,title:"Spot Collections"},u=void 0,p={unversionedId:"collections/documents/tutorials/using-spotcollections",id:"collections/documents/tutorials/using-spotcollections",title:"Spot Collections",description:"There are some use cases that call for strong consistency across all regions. For example, a financial application might need to show users' account balances. When users make a deposit, they want to see the result of this deposit reflected immediately when they view their balance (otherwise they may fear their money has been lost!). There should never appear to be more or less money in aggregate in the bank than there really is.",source:"@site/docs/collections/documents/tutorials/using-spotcollections.md",sourceDirName:"collections/documents/tutorials",slug:"/collections/documents/tutorials/using-spotcollections",permalink:"/docs/collections/documents/tutorials/using-spotcollections",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/collections/documents/tutorials/using-spotcollections.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,title:"Spot Collections"},sidebar:"tutorialSidebar",previous:{title:"Maps, Sets, SortedSets",permalink:"/docs/collections/documents/tutorials/maps_sets_sortedsets"},next:{title:"Using Rest APIs",permalink:"/docs/collections/documents/tutorials/using_rest_api"}},m={},d=[{value:"Pre-requisite",id:"pre-requisite",level:2},{value:"SDK download",id:"sdk-download",level:2},{value:"Code Sample",id:"code-sample",level:2}],f={toc:d};function y(e){var n=e.components,t=(0,o.Z)(e,s);return(0,r.kt)("wrapper",(0,a.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"There are some use cases that call for strong consistency across all regions. For example, a financial application might need to show users' account balances. When users make a deposit, they want to see the result of this deposit reflected immediately when they view their balance (otherwise they may fear their money has been lost!). There should never appear to be more or less money in aggregate in the bank than there really is. "),(0,r.kt)("p",null,"When performing read operations, here you want to read the latest copy of your data in ",(0,r.kt)("strong",{parentName:"p"},"global")," order. It provides the ability to read the latest change to your data across rows, regions and continents."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Spot Collections are only available on Enterprise customer accounts."),(0,r.kt)("p",{parentName:"admonition"},"Contact ",(0,r.kt)("a",{parentName:"p",href:"mailto:support@macrometa.com"},"support@macrometa.com")," if you have any questions.")),(0,r.kt)("h2",{id:"pre-requisite"},"Pre-requisite"),(0,r.kt)("p",null,"Let's assume your"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Tenant name is ",(0,r.kt)("inlineCode",{parentName:"li"},"nemo@nautilus.com")," and"),(0,r.kt)("li",{parentName:"ul"},"User password is ",(0,r.kt)("inlineCode",{parentName:"li"},"xxxxx"),".")),(0,r.kt)("h2",{id:"sdk-download"},"SDK download"),(0,r.kt)(i.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"  pyC8 requires Python 3.5+. Python 3.6 or higher is recommended\n\n  To install pyC8, simply run\n\n      $ pip3 install pyC8\n\n  or, if you prefer to use conda:\n\n      conda install -c conda-forge pyC8\n\n  or pipenv:\n\n      pipenv install --pre pyC8\n\n  Once the installation process is finished, you can begin developing applications in Python.\n"))),(0,r.kt)(l.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"  With Yarn or NPM\n\n      yarn add jsc8\n      (or)\n      npm install jsc8\n\n  If you want to use the SDK outside of the current directory, you can also install it globally using the `--global` flag:\n\n      npm install --global jsc8\n\n  From source,\n\n      git clone https://github.com/macrometacorp/jsc8.git\n      cd jsC8\n      npm install\n      npm run dist\n")))),(0,r.kt)("h2",{id:"code-sample"},"Code Sample"),(0,r.kt)(i.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'""" This file is a demo for spot collections """\nimport pprint\nfrom c8 import C8Client\n\n# Variables Access\nURL = "api-gdn.paas.macrometa.io"\nAPI_KEY = "my API key" #Change this to my API key\nAPI_KEY_ID = "my API key ID" #Change this to my API key ID\nGEO_FABRIC = "_system"\n\n# Variables - DB\ncollection_name = "accounts"\nread_query_name = "read_query"\nread_query = {"query": {"name": read_query_name, "value":\n    "FOR account IN accounts RETURN account"}}\naccounts_keys = "FOR k IN accounts RETURN k._key"\nspot_gf_name = "spot"\nregion_urls = [\n    "ap-northeast.paas.macrometa.io",\n    "eu-central.paas.macrometa.io",\n    "eu-west.paas.macrometa.io"\n]\n\n# Variables - Data\ndata = [\n    {"_key": "1", "firstname": "Peter", "lastname": "Parker", "City": "NewYork"},\n    {"_key": "2", "firstname": "Bruce", "lastname": "Wayne", "City": "Gotham"},\n    {"_key": "3", "firstname": "Clark", "lastname": "Kent", "City": "Manhatten"},\n    {"_key": "4", "firstname": "Ned", "lastname": "Stark", "City": "Winterfell"},\n    {"_key": "5", "firstname": "Tywin", "lastname": "Lannister", "City": "Kings Landing"}\n]\npp = pprint.PrettyPrinter(indent=4)\n\n\n# Step 1: Open connection to GDN. You will be routed to closest region.\nprint(f"1. CONNECT: federation: {URL},  user: {API_KEY}")\nclient = C8Client(protocol=\'https\', host=URL, port=443, apikey = API_KEY, geofabric=GEO_FABRIC)\n\n#print("The connection was successful:", client.get_collections())\n\n# Step 1.5: Assign a spot region.\nspot_region = client.tenant(apikey = API_KEY)\ndcl = spot_region.dclist(detail=False)\nfabric = spot_region.useFabric(GEO_FABRIC)\n\nif fabric.has_fabric(spot_gf_name):\n    print("Fabric", spot_gf_name, "already exists.")\nelse:\n    fabric.create_fabric(spot_gf_name, dclist=dcl,spot_creation_type=\n        fabric.SPOT_CREATION_TYPES.SPOT_REGION, spot_dc=\'eu-west.paas.macrometa.io\')\n    print("Fabric", spot_gf_name, "has been created successfully.")\n\nclient.set_database_access_level(API_KEY_ID, spot_gf_name, "rw")\n\n#print(fabric.properties())\nclient = spot_region.useFabric(spot_gf_name)\n#print(client.properties())\n\nspot_region_status = client.properties().get("options", {}).get("spotDc")\nif spot_region_status == "":\n    print("The fabric does not have a spot region registered.")\n    print("Please remove the fabric and create a new fabric with a spot region.")\n    print("Stopping program.")\n    exit()\nelse:\n    print("Spot region for the fabric", spot_gf_name, "is: ", spot_region_status)\n    print("Continuing...")\n\n\n# Step 2: Create or assign a spot collection.\n# getCollectionDetails\ndef isSpotCollection():\n    """ This function checks if the given collection already exists and if true,\n        returns the property \'isSpot\' """\n    for coll in client.collections():\n        if coll["name"] == collection_name:\n            return coll["isSpot"]\n\nprint(f"2. CREATE_COLLECTION: region: {URL},  collection: {collection_name}")\nif client.has_collection(collection_name):\n    if isSpotCollection():\n        print(collection_name, "is a spot collection.")\n        print("Continuing...")\n        collection = client.collection(collection_name)\n    else:\n        print(collection_name, "is not a spot collection")\n        print("Remove the collection and create a new one as a spot collection.")\n        print("Stopping program.")\n        exit()\nelse:\n    collection = client.create_collection(collection_name, spot_collection=True)\n    print(collection_name, "has been created successfully")\n\n\n# Step 3: Insert data into collection.\n#get_keys = client.execute_restql("accounts_keys")\nprint(f"3. INSERT_DATA: region: {URL}, collection: {collection_name}")\n#collection.insert_many(data)\nprint("Data has been inserted successfully inserted (duplicating data was avoided).")\n\n\n\n# Step 4: Create a new query worker or look for the existing one, then read data from the collection.\nprint(f"4. READ_DATA: region: {URL}, collection: {collection_name}")\nall_saved_queries = client.get_all_restql()\n\nquery_exists = False\nfor i in all_saved_queries:\n    if i["name"] == read_query_name:\n        query_exists = True\n        break\n\nif not query_exists:\n    client.save_restql(read_query)\n    print("The NEW query has been saved.")\nelse:\n    print("Query already exists.")\n\n\nprint(client.execute_restql(read_query_name))\n#print(client.execute_query("FOR account IN accounts RETURN account"))\n\n\n# Step 5: Read data from other regions.\nfor region_url in region_urls:\n    print(f"\\n5. DATA_MOBILITY: Reading from region: {region_url}")\n    #clientx = C8Client(protocol=\'https\', host=region_url, port=443, geofabric=\n        #spot_gf_name, apikey= API_KEY)\n    print(client.execute_restql(read_query_name))\n\n\n# Step 6: Delete data.\nprint(f"6. DELETE_DATA: fabric: {spot_gf_name}, collection: {collection_name}")\ntry:\n    collection.truncate()\n    client.delete_collection(collection_name)\n    client = spot_region.useFabric(GEO_FABRIC)\n    client.delete_fabric(spot_gf_name)\n    print("Spot collection and fabric have been deleted successfully.")\nexcept Exception as e:\n    print("There was an error while deleting the spot collection or fabric.")\n    print("Details:", e)\n'))),(0,r.kt)(l.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'  \'use strict\'\n\n  const jsc8 = require(\'jsc8\');\n\n  // Variables - DB\n  const global_url = "https://gdn.paas.macrometa.io";\n  const region_urls = [\n    "https://gdn-sfo2.prod.macrometa.io",\n    "https://gdn-us-west1.prod.macrometa.io",\n    "https://gdn-nyc1.prod.macrometa.io"\n  ];\n\n  // Crete a authenticated instance with Token / Apikey\n  // const client = new jsc8({url: global_url, token: "XXXX", fabricName: \'_system\'});\n  // const client = new jsc8({url: global_url, apiKey: "XXXX", fabricName: \'_system\'});\n  // await console.log("Authentication done!!...");\n\n  // Or use Email & Password to Authenticate client instance\n  const client = new jsc8(global_url);\n\n  await client.login("nemo@nautilus.com", "xxxxxx");\n\n  //Variables\n  const collection_name = "accounts";\n\n  const read_query = "FOR account IN accounts RETURN account";\n\n  // Variables - Data\n  const data = [\n    {"firstname": "Peter", "lastname": "Parker", "City": "NewYork"},\n    {"firstname": "Bruce", "lastname": "Wayne", "City": "Gotham"},\n    {"firstname": "Clark", "lastname": "Kent", "City": "Manhatten"},\n    {"firstname": "Ned", "lastname": "Stark", "City": "Winterfell"},\n    {"firstname": "Tywin", "lastname": "Lannister", "City": "Kings Landing"},\n  ];\n\n  async function createCollection() {\n    console.log("\\n 2. CREATE_COLLECTION");\n\n    try{\n      console.log(`Creating the collection ${collection_name}...`);\n      const exists_coll = await client.hasCollection(collection_name);\n      if (exists_coll === false) {\n          await client.createCollection(collection_name);\n      }\n    }\n    catch (e) {\n      await console.log("Collection creation did not succeed due to " + e);\n    }\n  }\n\n  async function insertData() {\n    console.log(`\\n 3. INSERT_DATA in region ${global_url}`);\n    await client.insertDocumentMany(collection_name, data);\n  }\n\n  async function readData(){\n    console.log(`\\n 4. READ_DATA in region ${global_url}`);\n    let result = await client.executeQuery(read_query);\n    console.log(result);\n  }\n\n  async function readDataFromAllRegions(){\n    for (let i = 0; i < region_urls.length; i++) { \n        // Crete a authenticated instance with Token / Apikey\n        // const regionclient = new jsc8({url: region_urls[i], token: "XXXX", fabricName: \'_system\'});\n        // const regionclient = new jsc8({url: region_urls[i], apiKey: "XXXX", fabricName: \'_system\'});\n        // await console.log("Authentication done!!...");\n\n        // Or use Email & Password to Authenticate client instance\n        const regionclient = new jsc8(region_urls[i]);\n        await regionclient.login("nemo@nautilus.com", "xxxxxx");\n\n        console.log(`\\n 5. READ_DATA: Reading from region : ${region_urls[i]}`);\n        let result = await client.executeQuery(read_query);\n        console.log(result);\n    }\n  }\n\n  async function deleteData(){\n    console.log("\\n 6. DELETE_DATA");\n    await client.deleteCollection(collection_name);\n  }\n\n  (async function(){\n    await createCollection();\n    await insertData();\n    await readData();\n    await readDataFromAllRegions();\n    await deleteData();\n  })();\n')))))}y.isMDXComponent=!0}}]);