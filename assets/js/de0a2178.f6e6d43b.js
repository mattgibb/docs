"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[21870],{3905:function(e,r,t){t.d(r,{Zo:function(){return p},kt:function(){return f}});var n=t(67294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function c(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?c(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},c=Object.keys(e);for(n=0;n<c.length;n++)t=c[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)t=c[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=n.createContext({}),l=function(e){var r=n.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},p=function(e){var r=l(e.components);return n.createElement(i.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,c=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=l(t),f=a,d=m["".concat(i,".").concat(f)]||m[f]||u[f]||c;return t?n.createElement(d,o(o({ref:r},p),{},{components:t})):n.createElement(d,o({ref:r},p))}));function f(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var c=t.length,o=new Array(c);o[0]=m;var s={};for(var i in r)hasOwnProperty.call(r,i)&&(s[i]=r[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<c;l++)o[l]=t[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5043:function(e,r,t){t.r(r),t.d(r,{assets:function(){return p},contentTitle:function(){return i},default:function(){return f},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return u}});var n=t(83117),a=t(80102),c=(t(67294),t(3905)),o=["components"],s={title:"grpc-call-response (Source)"},i=void 0,l={unversionedId:"cep/reference/functions/source/grpc-call-response",id:"cep/reference/functions/source/grpc-call-response",title:"grpc-call-response (Source)",description:"This grpc source receives responses received from gRPC server for",source:"@site/docs/cep/reference/functions/source/grpc-call-response.md",sourceDirName:"cep/reference/functions/source",slug:"/cep/reference/functions/source/grpc-call-response",permalink:"/docs/cep/reference/functions/source/grpc-call-response",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/cep/reference/functions/source/grpc-call-response.md",tags:[],version:"current",frontMatter:{title:"grpc-call-response (Source)"},sidebar:"tutorialSidebar",previous:{title:"email (Source)",permalink:"/docs/cep/reference/functions/source/email"},next:{title:"grpc-service (Source)",permalink:"/docs/cep/reference/functions/source/grpc-service"}},p={},u=[{value:"Query Parameters",id:"query-parameters",level:2},{value:"Example 1",id:"example-1",level:2}],m={toc:u};function f(e){var r=e.components,t=(0,a.Z)(e,o);return(0,c.kt)("wrapper",(0,n.Z)({},m,t,{components:r,mdxType:"MDXLayout"}),(0,c.kt)("p",null,"This grpc source receives responses received from gRPC server for\nrequests sent from a grpc-call sink. The source will receive responses\nfor sink with the same sink.id. For example if you have a gRPC sink with\nsink.id 15 then we need to set the sink.id as 15 in the source to\nreceives responses. Sinks and sources have 1:1 mapping"),(0,c.kt)("p",null,"Syntax"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},'CREATE SOURCE <NAME> WITH (type="grpc-call-response", map.type="<STRING>", sink.id="<INT>")\n')),(0,c.kt)("h2",{id:"query-parameters"},"Query Parameters"),(0,c.kt)("table",null,(0,c.kt)("thead",{parentName:"table"},(0,c.kt)("tr",{parentName:"thead"},(0,c.kt)("th",{parentName:"tr",align:null},"Name"),(0,c.kt)("th",{parentName:"tr",align:null},"Description"),(0,c.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,c.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,c.kt)("th",{parentName:"tr",align:null},"Optional"),(0,c.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,c.kt)("tbody",{parentName:"table"},(0,c.kt)("tr",{parentName:"tbody"},(0,c.kt)("td",{parentName:"tr",align:null},"sink.id"),(0,c.kt)("td",{parentName:"tr",align:null},"a unique ID that should be set for each grpc-call source. There is a 1:1 mapping between grpc-call sinks and grpc-call-response sources. Each sink has one particular source listening to the responses to requests published from that sink. So the same sink.id should be given when writing the sink also."),(0,c.kt)("td",{parentName:"tr",align:null}),(0,c.kt)("td",{parentName:"tr",align:null},"INT"),(0,c.kt)("td",{parentName:"tr",align:null},"No"),(0,c.kt)("td",{parentName:"tr",align:null},"No")))),(0,c.kt)("h2",{id:"example-1"},"Example 1"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"CREATE SOURCE BarStream WITH (type='grpc-call-response', sink.id= '1') (message String);\n\nCREATE SINK FooStream WITH (type='grpc-call', publisher.url = 'grpc://194.23.98.100:8080/EventService/process', sink.id= '1', map.type='json') (message String);\n")),(0,c.kt)("p",null,"Here we are listening to responses for requests sent from the sink with\nsink.id 1 will be received here. The results will be injected into\nBarStream"))}f.isMDXComponent=!0}}]);