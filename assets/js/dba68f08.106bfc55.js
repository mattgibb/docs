"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[76267],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return d}});var a=t(67294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var c=a.createContext({}),s=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=s(e.components);return a.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,r=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=s(t),d=l,b=m["".concat(c,".").concat(d)]||m[d]||p[d]||r;return t?a.createElement(b,o(o({ref:n},u),{},{components:t})):a.createElement(b,o({ref:n},u))}));function d(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var r=t.length,o=new Array(r);o[0]=m;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:l,o[1]=i;for(var s=2;s<r;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},85162:function(e,n,t){t.d(n,{Z:function(){return o}});var a=t(67294),l=t(34334),r="tabItem_Ymn6";function o(e){var n=e.children,t=e.hidden,o=e.className;return a.createElement("div",{role:"tabpanel",className:(0,l.Z)(r,o),hidden:t},n)}},65488:function(e,n,t){t.d(n,{Z:function(){return d}});var a=t(83117),l=t(67294),r=t(34334),o=t(72389),i=t(67392),c=t(7094),s=t(12466),u="tabList__CuJ",p="tabItem_LNqP";function m(e){var n,t,o=e.lazy,m=e.block,d=e.defaultValue,b=e.values,f=e.groupId,g=e.className,h=l.Children.map(e.children,(function(e){if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),y=null!=b?b:h.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),v=(0,i.l)(y,(function(e,n){return e.value===n.value}));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var k=null===d?d:null!=(n=null!=d?d:null==(t=h.find((function(e){return e.props.default})))?void 0:t.props.value)?n:h[0].props.value;if(null!==k&&!y.some((function(e){return e.value===k})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+k+'" but none of its children has the corresponding value. Available values are: '+y.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var C=(0,c.U)(),_=C.tabGroupChoices,O=C.setTabGroupChoices,E=(0,l.useState)(k),N=E[0],T=E[1],L=[],w=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=f){var A=_[f];null!=A&&A!==N&&y.some((function(e){return e.value===A}))&&T(A)}var I=function(e){var n=e.currentTarget,t=L.indexOf(n),a=y[t].value;a!==N&&(w(n),T(a),null!=f&&O(f,String(a)))},x=function(e){var n,t=null;switch(e.key){case"ArrowRight":var a,l=L.indexOf(e.currentTarget)+1;t=null!=(a=L[l])?a:L[0];break;case"ArrowLeft":var r,o=L.indexOf(e.currentTarget)-1;t=null!=(r=L[o])?r:L[L.length-1]}null==(n=t)||n.focus()};return l.createElement("div",{className:(0,r.Z)("tabs-container",u)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":m},g)},y.map((function(e){var n=e.value,t=e.label,o=e.attributes;return l.createElement("li",(0,a.Z)({role:"tab",tabIndex:N===n?0:-1,"aria-selected":N===n,key:n,ref:function(e){return L.push(e)},onKeyDown:x,onFocus:I,onClick:I},o,{className:(0,r.Z)("tabs__item",p,null==o?void 0:o.className,{"tabs__item--active":N===n})}),null!=t?t:n)}))),o?(0,l.cloneElement)(h.filter((function(e){return e.props.value===N}))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},h.map((function(e,n){return(0,l.cloneElement)(e,{key:n,hidden:e.props.value!==N})}))))}function d(e){var n=(0,o.Z)();return l.createElement(m,(0,a.Z)({key:String(n)},e))}},78243:function(e,n,t){t.r(n),t.d(n,{assets:function(){return m},contentTitle:function(){return u},default:function(){return f},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return d}});var a=t(83117),l=t(80102),r=(t(67294),t(3905)),o=t(65488),i=t(85162),c=["components"],s={sidebar_position:3,title:"Realtime Updates"},u=void 0,p={unversionedId:"streams/tutorials/using-realtime-updates",id:"streams/tutorials/using-realtime-updates",title:"Realtime Updates",description:"This tutorial is about using Macrometa GDN as a realtime database with local latencies across the globe.",source:"@site/docs/streams/tutorials/using-realtime-updates.md",sourceDirName:"streams/tutorials",slug:"/streams/tutorials/using-realtime-updates",permalink:"/docs/streams/tutorials/using-realtime-updates",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/streams/tutorials/using-realtime-updates.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Realtime Updates"},sidebar:"tutorialSidebar",previous:{title:"Pub-Sub with Streams",permalink:"/docs/streams/tutorials/pub-sub-streams"},next:{title:"Integrating Plugins",permalink:"/docs/streams/tutorials/integrating-plugins"}},m={},d=[{value:"Pre-requisite",id:"pre-requisite",level:2},{value:"SDK download",id:"sdk-download",level:2},{value:"Code Sample",id:"code-sample",level:2}],b={toc:d};function f(e){var n=e.components,t=(0,l.Z)(e,c);return(0,r.kt)("wrapper",(0,a.Z)({},b,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This tutorial is about using Macrometa GDN as a realtime database with local latencies across the globe."),(0,r.kt)("h2",{id:"pre-requisite"},"Pre-requisite"),(0,r.kt)("p",null,"Let's assume your"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Tenant name is ",(0,r.kt)("inlineCode",{parentName:"li"},"nemo@nautilus.com")," and"),(0,r.kt)("li",{parentName:"ul"},"User password is ",(0,r.kt)("inlineCode",{parentName:"li"},"xxxxxx"),".")),(0,r.kt)("h2",{id:"sdk-download"},"SDK download"),(0,r.kt)(o.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"With Yarn or NPM\n\n    yarn add jsc8\n    (or)\n    npm install jsc8\n\nIf you want to use the SDK outside of the current directory, you can also install it globally using the `--global` flag:\n\n    npm install --global jsc8\n\nFrom source,\n\n    git clone https://github.com/macrometacorp/jsc8.git\n    cd jsC8\n    npm install\n    npm run dist\n"))),(0,r.kt)(i.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"pyC8 requires Python 3.5+. Python 3.6 or higher is recommended\n\nTo install pyC8, simply run\n\n    $ pip3 install pyC8\n\nor, if you prefer to use conda:\n\n    conda install -c conda-forge pyC8\n\nor pipenv:\n\n    pipenv install --pre pyC8\n\nOnce the installation process is finished, you can begin developing applications in Python.\n")))),(0,r.kt)("h2",{id:"code-sample"},"Code Sample"),(0,r.kt)(o.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const jsc8 = require(\'jsc8\');\n\n// Variables - DB\nconst global_url = "https://gdn.paas.macrometa.io";\n\n// Crete a authenticated instance with Token / Apikey\n// const client = new jsc8({url: global_url, token: "XXXX", fabricName: \'_system\'});\n// const client = new jsc8({url: global_url, apiKey: "XXXX", fabricName: \'_system\'});\n// await console.log("Authentication done!!...");\n\n// Or use Email & Password to Authenticate client instance\nconst client = new jsc8(global_url);\n\nawait client.login("nemo@nautilus.com", "xxxxxx");\n\n//Variables\nconst collection_name = "ddos";\nlet collectionDetails;\n\n// Variables - Data\nconst data = [\n  {"ip": "10.1.1.1", "action": "block", "rule": "blacklistA"},\n  {"ip": "20.1.1.2", "action": "block", "rule": "blacklistA"},\n  {"ip": "30.1.1.3", "action": "block", "rule": "blacklistB"},\n  {"ip": "40.1.1.4", "action": "block", "rule": "blacklistA"},\n  {"ip": "50.1.1.5", "action": "block", "rule": "blacklistB"},\n];\n\nasync function createCollection() {\n  console.log("\\n 2. CREATE_COLLECTION");\n\n  try{\n      console.log(`Creating the collection ${collection_name}...`);\n      const exists_coll = await client.hasCollection(collection_name);\n      if (exists_coll === false) {\n          await client.createCollection(collection_name);\n      }\n\n      // adding a onChange listner for collection\n        const listener = await client.onCollectionChange(collection_name);\n        listener.on(\'message\',(msg) => console.log("message=>", msg));\n        listener.on(\'open\',() => {\n          this.callback_fn(collection);\n        });\n        listener.on(\'close\',() => console.log("connection closed"));\n    }\n    catch (e) {\n      await console.log("Collection creation did not succeed due to " + e);\n    }\n}\n\nasync function insertData() {\n  console.log(`\\n 3. INSERT_DATA in region ${global_url}`);\n  await client.insertDocumentMany(collection_name, data);\n}\n\nasync function deleteData(){\n  console.log("\\n 4. DELETE_DATA");\n  await client.deleteCollection(collection_name);\n}\n\n(async function(){\n  await createCollection();\n  await insertData();\n  await deleteData();\n})();\n'))),(0,r.kt)(i.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'from c8 import C8Client\nimport threading\nimport pprint\nimport time\n\n# Variables - URLs\nGLOBAL_URL = "gdn.paas.macrometa.io"\n\n# Variables - DB\nEMAIL = "nemo@nautilus.com"\nFABRIC = "_system"\nCOLLECTION_NAME = "ddos"\n\n# Variables - Data\ndata = [\n    {"ip": "10.1.1.1", "action": "block", "rule": "blacklistA"},\n    {"ip": "20.1.1.2", "action": "block", "rule": "blacklistA"},\n    {"ip": "30.1.1.3", "action": "block", "rule": "blacklistB"},\n    {"ip": "40.1.1.4", "action": "block", "rule": "blacklistA"},\n    {"ip": "50.1.1.5", "action": "block", "rule": "blacklistB"},\n]\n\npp = pprint.PrettyPrinter(indent=4)\n\nif __name__ == \'__main__\':\n\n    # Step1: Open connection to GDN. You will be routed to closest region.\n    print(f"\\n1. CONNECT: federation: {GLOBAL_URL},  user: {EMAIL}")\n    client = C8Client(protocol=\'https\', host=GLOBAL_URL, port=443, apikey="", geofabric=FABRIC)\n\n    # Step 2: Create a collection if one does not exist\n    print(f"\\n2. CREATE_COLLECTION: region: {GLOBAL_URL},  collection: {COLLECTION_NAME}")\n    if client.has_collection(COLLECTION_NAME):\n        collection = client.collection(COLLECTION_NAME)\n    else:\n        collection = client.create_collection(COLLECTION_NAME, stream=True)\n\n    # Subscribe to be notified when changes are made to collection.\n\n    def create_callback():\n        def callback_fn(event):\n            pp.pprint(event)\n            return\n\n        client.on_change(COLLECTION_NAME, callback=callback_fn, timeout=15)\n\n    # Step3: Subscribe to receive documents in realtime (PUSH model)\n    print(f"\\n3. SUBSCRIBE_COLLECTION: region: {GLOBAL_URL},  collection: {COLLECTION_NAME}")\n    rt_thread = threading.Thread(target=create_callback)\n    rt_thread.start()\n    time.sleep(10)\n    print(f"Callback registered for collection: {COLLECTION_NAME}")\n\n    # Step4: Subscribe to receive documents in realtime (PUSH model)\n    print(f"\\n4. INSERT_DOCUMENTS: region: {GLOBAL_URL},  collection: {COLLECTION_NAME}")\n    client.insert_document(COLLECTION_NAME, document=data)\n\n    # Step5: Wait to close the callback.\n    print("\\n5. Waiting to close callback")\n    rt_thread.join(2)\n\n    # Step6: Delete data.\n    print(f"\\n6. DELETE_DATA: region: {GLOBAL_URL}, collection: {COLLECTION_NAME}")\n    collection.truncate()\n    client.delete_collection(COLLECTION_NAME)\n')))))}f.isMDXComponent=!0}}]);